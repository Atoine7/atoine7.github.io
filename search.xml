<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端基础--React</title>
      <link href="/2021/08/15/qian-duan-ji-chu-react/"/>
      <url>/2021/08/15/qian-duan-ji-chu-react/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>React作为当前国内前端两大框架之一，是我们必须掌握的，更是进大厂必不可少的，本文详细介绍了react的基础和原理，让你对react有更深的认识和见解</p><p>食用对象：初级前端<br>美味指数：😋😋😋😋😋</p><h3 id="1-react事件机制-⭐⭐⭐⭐⭐"><a href="#1-react事件机制-⭐⭐⭐⭐⭐" class="headerlink" title="1.react事件机制 ⭐⭐⭐⭐⭐"></a>1.react事件机制 ⭐⭐⭐⭐⭐</h3><p><strong>采取事件合成模式的原因：</strong></p><ol><li>如果DOM上绑定了过多的事件处理函数，整个页面响应以及内存占用可能都会受到影响。</li><li>React为了避免这类DOM事件滥用，将事件绑定在root统一管理，相当于事件委托，防止很多事件直接绑定在原生的dom元素上，造成一些不可控的情况</li><li>React 想实现一个全浏览器的框架，为了实现这种目标就需要提供全浏览器一致性的事件系统，以此抹平不同浏览器的差异。</li></ol><p><strong>步骤</strong></p><ul><li>事件绑定：当用户在为onClick添加函数时，React并没有将Click时间绑定在DOM上面。而是在root处监听所有支持的事件（相同于使用统一的事件监听器，这个事件监听器上维持了一个映射来保存所有组件内部事件监听和处理函数）<br></li><li>事件触发：当事件发生并冒泡至root处时，使用统一的分发函数dispatchEvent将指定函数执行</li></ul><p><strong>特点</strong></p><ul><li>大部分事件代理到root上，达到性能优化的目的</li><li>对于每种类型的事件，拥有统一的分发函数dispatchEvent</li><li>事件对象是合成对象，不是原生的, 模拟出来DOM事件所有能力</li><li>event.nativeEvent可以得到原生事件对象</li><li>在传递参数时，最后直接一个参数，即可接收event</li></ul><p><strong>合成事件和原生事件的区别</strong></p><ol><li>写法不同，在原生事件中，事件名称使用小写，而 React 中使用驼峰命名</li><li>阻止默认行为不同，在 HTML 中，阻止事件的默认行为使用 return false，而 React 中必须调用 preventDefault。</li><li>使用 JSX 语法时需要传入一个函数作为事件处理函数，而不是一个字符串；</li><li>机制不同，原生是直接将事件绑定到当前元素，React 中的事件机制则分为两个阶段：事件注册、事件分发。所有的事件都会注册到 root 上，当触发时，会采用事件冒泡的形式冒泡到root上面，然后React将事件封装给正式的函数处理运行和处理。</li></ol><h3 id="2-什么是JSX：⭐⭐⭐⭐⭐"><a href="#2-什么是JSX：⭐⭐⭐⭐⭐" class="headerlink" title="2. 什么是JSX：⭐⭐⭐⭐⭐"></a>2. 什么是JSX：⭐⭐⭐⭐⭐</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'tag'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> child1<span class="token punctuation">,</span> child2<span class="token punctuation">,</span> child3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>jsx是JavaScript的一种语法扩展，充分具备JavaScript的能力</li><li>JSX会被babel编译为：React.createElement()，第一个参数是标签名，第二个是属性，第三个是孩子</li><li>JSX语法糖允许前端开发者使用我们最熟悉的类HTML标签语法来创建虚拟DOM，这个函数返回的是vnode，然后通过patch去渲染</li></ul><h3 id="3-react组件通信-⭐⭐⭐⭐⭐"><a href="#3-react组件通信-⭐⭐⭐⭐⭐" class="headerlink" title="3. react组件通信 ⭐⭐⭐⭐⭐"></a>3. react组件通信 ⭐⭐⭐⭐⭐</h3><p><strong>1. 采用props传递需要的信息</strong></p><p><strong>2. context：</strong><br><br>在React中，数据传递一般使用props传递数据，维持单向数据流，当你不想在组件树中通过逐层传递props的方式来传递数据时，可以使用Context来实现跨层级的组件数据传递<br><em>原理</em>：<br><br>由于组件 的 Context 由其父节点链上所有组件通 过 getChildContext（）返回的Context对象组合而成，所以，组件通过Context是可以访问到其父组件链上所有节点组件提供的Context的属性。<br><br><em>应用场景</em>：<br><br>语言，主题等逻辑不复杂但是要一层一层往下传递<br><br><em>过程</em>：<br></p><ul><li>首先用React.createContext(默认值)创建一个context：xxx</li><li>然后用这个xxx.Provider包裹组件，上面有一个value={需要改变且接收的值}</li><li>（class组件消费的时候消费组件.contextType = xxx(刚定义的context)，然后可以直接获取this.context里的值）</li><li>（函数组件就用xxx.Consumer包裹内容，里面用一个函数就能得到value值）</li></ul><p><strong>3. 通过redux等进行全局状态管理</strong></p><p><strong>4. 自定义发布订阅模式</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> EventEmitter <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'events'</span><span class="token punctuation">;</span>组件<span class="token number">1</span>：  <span class="token keyword">this</span><span class="token punctuation">.</span>eventEmitter <span class="token operator">=</span> emitter<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">'changeMessage'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>       message<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>组件<span class="token number">2</span>：    <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'changeMessage'</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5. 通过路由传参</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">params  <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>pathname<span class="token operator">:</span><span class="token string">"/path/"</span> <span class="token operator">+</span> name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  读取参数用<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>namequery  <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>pathname<span class="token operator">:</span><span class="token string">"/query"</span><span class="token punctuation">,</span>query<span class="token operator">:</span> <span class="token punctuation">&#123;</span> name <span class="token operator">:</span> <span class="token string">'sunny'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  读取参数用<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>query<span class="token punctuation">.</span>namestate  <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>pathname<span class="token operator">:</span><span class="token string">"/sort "</span><span class="token punctuation">,</span>state <span class="token operator">:</span> <span class="token punctuation">&#123;</span> name <span class="token operator">:</span> <span class="token string">'sunny'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  读取参数用<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>query<span class="token punctuation">.</span>statesearch  <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>pathname<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/web/search?id </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>row<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  读取参数用<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>优缺点：</em></p><ul><li>params在HashRouter和BrowserRouter路由中刷新页面参数都不会丢失</li><li>state在BrowserRouter中刷新页面参数不会丢失，在HashRouter路由中刷新页面会丢失</li><li>query：在HashRouter和BrowserRouter路由中刷新页面参数都会丢失</li><li>query和 state 可以传对象</li></ul><p><strong>6. ref</strong></p><p>原理: 通过 React 的 ref 属性获取到整个子组件实例,再进行操作，注意如果是hooks就必须绑定到DOM上，或者用useImperativeHandle</p><h3 id="4-说一下高阶组件和render-props-⭐⭐⭐⭐⭐"><a href="#4-说一下高阶组件和render-props-⭐⭐⭐⭐⭐" class="headerlink" title="4. 说一下高阶组件和render props ⭐⭐⭐⭐⭐"></a>4. 说一下高阶组件和render props ⭐⭐⭐⭐⭐</h3><p><strong>高阶组件：</strong></p><p>HOC是一种组件的设计模式，HOC接受一个组件和额外的参数（如果需要），返回一个新的组件。HOC 是纯函数，没有副作用。<br><br>1.透传所有props  {…this.props}<br><br>2.增加xxx属性<br><br><em>优点</em>：逻辑复用、不影响被包裹组件的内部逻辑。<br><br><em>缺点</em>：会增加组件层级，比如说透传成本，透传覆盖等</p><p><strong>render prop：</strong></p><p>render prop是指一种在 React 组件之间使用一个值为函数的 prop 共享代码的简单技术，具有render prop 的组件接受一个返回React元素的函数，将render的渲染逻辑注入到组件内部<br><br><em>优点</em>：数据共享、代码复用，将组件内的state作为props传递给调用者，将渲染逻辑交给调用者。<br><br><em>缺点</em>：无法在 return 语句外访问数据、嵌套写法不够优雅</p><h3 id="5-react生命周期-⭐⭐⭐⭐⭐"><a href="#5-react生命周期-⭐⭐⭐⭐⭐" class="headerlink" title="5. react生命周期 ⭐⭐⭐⭐⭐"></a>5. react生命周期 ⭐⭐⭐⭐⭐</h3><p><strong>组件挂载阶段：</strong></p><p><em>1. constructor：</em></p><ul><li>   若没有显式定义它，会有一个默认的构造函数</li><li>   若显式定义了构造函数，我们必须在构造函数中执行 super(props)，为了继承父亲的this对象，否则无法在构造函数中拿到this。</li><li>   如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数Constructor。<br>constructor中通常只做两件事：</li><li>初始化组件的 state</li><li>给事件处理方法绑定 this</li></ul><p><em>2. getDerivedStateFromProps</em></p><ul><li>是静态方法，所以不能在这个函数里使用 this</li><li>有两个参数 props 和 state，分别指接收到的新参数和当前组件的 state 对象</li><li>这个函数会返回一个对象用来更新当前的 state 对象，如果不需要更新可以返回 null。</li><li>该函数会在装载时，接收到新的 props 或者调用了 setState 和 forceUpdate 时被调用。如当接收到新的属性想修改 state ，就可以使用。</li></ul><p><em>3. render</em></p><p>  render是React 中最核心的方法，一个组件中必须要有这个方法，它会根据状态 state 和属性 props 渲染组件</p><p><em>4. componentDidMount</em></p><p>会在组件挂载后（插入 DOM 树中）立即调用。</p><p>该阶段通常进行以下操作：</p><ul><li>  执行依赖于DOM的操作；</li><li>  发送网络请求；（官方建议）</li><li>  添加订阅消息（会在componentWillUnmount取消订阅）；</li></ul><p><strong>组件更新阶段：</strong></p><p>当组件的 props 改变了，或组件内部调用了 setState/forceUpdate，会触发更新重新渲染，这个过程可能会发生多次</p><p><em>1. getDerivedStateFromProps</em></p><p><em>2. shouldComponentUpdate</em></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> nextState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>nextState<span class="token punctuation">,</span>count <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">//可以渲染</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token comment">//不重复渲染</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>SCU默认返回true，即React默认重新渲染所有子组件</li><li>必须配合“不可变值”一起使用</li><li>可先不用SCU，有性能问题时再考虑使用</li></ul><p><em>SCU总结：</em><br><br>　　SCU是一个钩子函数，可以在里面自定义是否重新渲染的逻辑，它返回一个布尔值，如果没有自定义每次都会默认返回false，利用这个生命周期函数可以让不需要更新的子组件不更新来提升渲染性能，正是因为这个，react的不可变值原则非常重要，每次setState都应需要保证原来state不改变，不然使用SCU或者PureComponent时浅比较就可能对数组和对象的变化出问题</p><p><strong>3. render</strong></p><p><strong>4. getSnapshotBeforeUpdate</strong></p><ul><li>有两个参数 prevProps 和 prevState，表示更新之前的 props 和 state</li><li>它使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置）。</li><li>此生命周期方法的任何返回值将作为参数传递给 componentDidUpdate()。</li></ul><p><strong>5. componentDidUpdate</strong></p><p>组件更新后的生命周期，可以对DOM进行操作</p><p>该方法有三个参数：</p><ul><li> prevProps: 更新前的props</li><li> prevState: 更新前的state</li><li> snapshot: getSnapshotBeforeUpdate()生命周期的返回值</li></ul><p><strong>组件卸载阶段</strong></p><p><em>1. componentWillUnmount()</em></p><p>会在组件卸载及销毁之前直接调用，应该再这个方法中使用 setState，因为组件一旦被卸载，就不会再装载，也就不会重新渲染。</p><p>作用：</p><ul><li>清除 timer，取消网络请求或清除</li><li>取消在 componentDidMount() 中创建的订阅等；</li></ul><p><strong>错误处理阶段</strong><br><br><em>1. componentDidCatch(error, info)</em></p><p>此生命周期在后代组件抛出错误后被调用。</p><p>它接收两个参数∶</p><ul><li>error：抛出的错误。</li><li>info：带有 componentStack key 的对象，其中包含有关组件引发错误的栈信息</li></ul><h3 id="6-什么是受控组件和非受控组件-⭐⭐⭐⭐"><a href="#6-什么是受控组件和非受控组件-⭐⭐⭐⭐" class="headerlink" title="6. 什么是受控组件和非受控组件 ⭐⭐⭐⭐"></a>6. 什么是受控组件和非受控组件 ⭐⭐⭐⭐</h3><p><strong>受控组件：</strong><br><br>在使用表单来收集用户输入时，例如<code>&lt;input&gt;&lt;select&gt;&lt;textearea&gt;</code>等元素都要绑定一个change事件，当表单的状态发生变化，就会触发onChange事件，更新组件的state。<br><br>这种组件在React中被称为受控组件，在受控组件中，组件渲染出的状态与它的value或checked属性相对应<br><br><em>缺点</em>：<br><br>表单元素的值都是由React组件进行管理，当有多个输入框，或者多个这种组件时，如果想同时获取到全部的值就必须每个都要编写事件处理函数，这会让代码看着很臃肿，所以为了解决这种情况，出现了非受控组件。</p><p><strong>非受控组件：</strong></p><p>input的值不受state控制，只是有初始值defaultValue， 一般通过ref拿dom节点的值去拿，现用现取</p><p><em>使用场景：</em></p><ul><li>必须手动操作DOM元素，setState实现不了，比如文件上传<input type="file"></li><li>某些富文本编辑器，需要传入DOM元素</li></ul><h3 id="7-介绍一下setState？-⭐⭐⭐⭐⭐"><a href="#7-介绍一下setState？-⭐⭐⭐⭐⭐" class="headerlink" title="7. 介绍一下setState？ ⭐⭐⭐⭐⭐"></a>7. 介绍一下setState？ ⭐⭐⭐⭐⭐</h3><p><strong>setState是同步还是异步的？</strong></p><p><em>异步</em>：在 React 可以控制的地方，就为 true，比如在 React 生命周期事件和合成事件中，都会走合并操作，延迟更新的策略。<br><br><em>同步</em>：在 React 无法控制的地方，比如原生事件，具体就是在 addEventListener、setTimeout、setInterval 等事件中，就只能同步更新。</p><p><strong>setState调用过程：</strong></p><ol><li>在调用setState后，setState里有一个enqueueSetState 方法将新的 state 放进组件的状态队列里，并调用 enqueueUpdate ，传入将要更新的实例对象；</li><li>在 enqueueUpdate 方法里，会判断batchingStrategy对象的 isBatchingUpdates 属性，isBatchingUpdates默认为false，isBatchingUpdates标识着当前是否处于批量创建/更新组件的阶段如果轮到执行，就调用 batchedUpdates 方法来直接发起更新流程。（batchingStrategy 或许正是 React 内部专门用于管控批量更新的对象。）</li><li>每当 React 调用 batchedUpdate 去执行更新动作时，会先把这个锁给“锁上”（置为 true），表明“现在正处于批量更新过程中”。当锁被“锁上”的时候，任何需要更新的组件都只能暂时进入 dirtyComponents 里排队等候下一次的批量更新，而不能随意“插队”。此处体现的“任务锁”的思想，是 React 面对大量状态仍然能够实现有序分批处理的基石。</li></ol><p><em>哪些能命中batchUpdate机制：</em></p><ul><li>生命周期（和它调用的函数）</li><li>React中注册的事件（和它调用的函数）</li><li>React可以“管理”的入口</li></ul><p><em>哪些不能命中batchUpdate机制：</em></p><ul><li>setTimeout setInterval等（和它调用的函数）</li><li>自定义的DOM事件（和它调用的函数）</li><li>React“管不到的入口”</li></ul><p><strong>不可变值：</strong><br><br>不要直接改变state，需要使用setState，同时修改时不能影响原来state的值<br></p><p>当为数组时：<br>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  list1<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//追加</span>  list2<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list2<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">//追加</span>  list3<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list3<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//截取</span>  list4<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list4<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//筛选</span>  list5<span class="token operator">:</span> list5Copy  <span class="token comment">//其他操作</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>也可以用slice()后得到一个副本，然后进行操作，注意不能直接对this.state.list进行push pop splice等，这样违反不可变值</p><p>当为对象时：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  obj1<span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>obj1<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  obj2<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>obj2<span class="token punctuation">,</span> a<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意，不能直接对this.state.obj进行属性设置，这样违反不可变值</p><h3 id="7-React中的props为什么是只读的？-⭐⭐⭐⭐"><a href="#7-React中的props为什么是只读的？-⭐⭐⭐⭐" class="headerlink" title="7. React中的props为什么是只读的？ ⭐⭐⭐⭐"></a>7. React中的props为什么是只读的？ ⭐⭐⭐⭐</h3><p>props只能从父组件流向子组件，React具有浓重的函数式编程的思想。<br><br>提到函数式编程就要提一个概念：纯函数。</p><p>它有几个特点：</p><ul><li>给定相同的输入，总是返回相同的输出。</li><li>过程没有副作用。</li><li>不依赖外部状态。<br>this.props就是汲取了纯函数的思想。props的不可以变性就保证的相同的输入，页面显示的内容是一样的，并且不会产生副作用</li></ul><h3 id="8-react性能优化-⭐⭐⭐⭐"><a href="#8-react性能优化-⭐⭐⭐⭐" class="headerlink" title="8. react性能优化 ⭐⭐⭐⭐"></a>8. react性能优化 ⭐⭐⭐⭐</h3><p><strong>shouldComponentUpdate</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> nextState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>nextState<span class="token punctuation">,</span>count <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">//可以渲染</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token comment">//不重复渲染</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>SCU默认返回true，即React默认重新渲染所有子组件</li><li>必须配合“不可变值”一起使用</li><li>可先不用SCU，有性能问题时再考虑使用</li></ol><p><em>SCU总结：</em><br>SCU是一个钩子函数，可以在里面自定义是否重新渲染的逻辑，它返回一个布尔值，如果没有自定义每次都会默认返回false，利用这个生命周期函数可以让不需要更新的子组件不更新来提升渲染性能，正是因为这个，react的不可变值原则非常重要，每次setState都应需要保证原来state不改变，不然使用SCU<br>或者PureComponent时浅比较就可能对数组和对象的变化出问题</p><p><strong>PureComponent</strong><br><br>在React中，当prop或者state发生变化时，可以通过在shouldComponentUpdate生命周期函数中执行return false来阻止页面的更新，从而减少不必要的render执行。React.PureComponent会自动执行shouldComponentUpdate。不过，pureComponent中的 shouldComponentUpdate()进行的是浅比较，也就是说如果是引用数据类型的数据，只会比较不是同一个地址，而不会比较这个地址里面的数据是否一致，这样就省去虚拟DOM的生成和对比过程，达到提升性能的目的</p><h3 id="9-什么是-Fragments：-⭐⭐⭐"><a href="#9-什么是-Fragments：-⭐⭐⭐" class="headerlink" title="9. 什么是 Fragments： ⭐⭐⭐"></a>9. 什么是 Fragments： ⭐⭐⭐</h3><ul><li>React 中的一个常见模式是一个组件返回多个元素。Fragments 允许你将子列表分组，而无需向 DOM 添加额外节点。</li><li>在React中，我们需要有一个父元素，同时从组件返回React元素。有时在DOM中添加额外的节点会很烦人。使用 Fragments，我们不需要在DOM中添加额外的节点。我们只需要用 React.Fragment 或才简写 &lt;&gt; 来包裹内容就行了</li></ul><h3 id="10-介绍一下传送门Portal：-⭐⭐⭐"><a href="#10-介绍一下传送门Portal：-⭐⭐⭐" class="headerlink" title="10. 介绍一下传送门Portal： ⭐⭐⭐"></a>10. 介绍一下传送门Portal： ⭐⭐⭐</h3><p>Portal 提供了一种将子节点渲染到存在于父组件以外的 DOM 节点的优秀的方案</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">ReactDOM<span class="token punctuation">.</span><span class="token function">createPortal</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个参数（child）是任何可渲染的 React 子元素，例如一个元素，字符串或 fragment。第二个参数（container）是一个 DOM 元素。</p><p>使用场景：</p><ul><li>父组件有overflow:hidden，想逃离父组件</li><li>父组件z-index值太小</li><li>fixed的元素要放到body第一层，有更好的浏览器兼容性<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">return</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createPortal</span><span class="token punctuation">(</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span>  domNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="11-类组件与函数组件有什么异同？-⭐⭐⭐"><a href="#11-类组件与函数组件有什么异同？-⭐⭐⭐" class="headerlink" title="11. 类组件与函数组件有什么异同？ ⭐⭐⭐"></a>11. 类组件与函数组件有什么异同？ ⭐⭐⭐</h3><p><strong>相同点：</strong></p><p>组件是 React 可复用的最小代码片段，它们会返回要在页面中渲染的 React 元素。<br>呈现效果一致，可相互改写</p><p><strong>不同点：</strong></p><ol><li>类组件是基于面向对象编程的，它主打的是继承、生命周期等核心概念<br><br>函数组件内核是函数式编程，主打的是 immutable、没有副作用、引用透明等特点。</li><li>性能优化上，类组件主要依靠 shouldComponentUpdate阻断渲染来提升性能，而函数组件依靠 React.memo 缓存渲染结果来提升性能。</li><li>类组件更容易上手，从未来趋势上看，由于React Hooks 的推出，函数组件成了社区未来主推的方案。</li><li>类组件在未来时间切片与并发模式中，由于生命周期带来的复杂度，并不易于优化。函数组件本身轻量简单，且在 Hooks 的基础上提供了比原先更细粒度的逻辑组织与复用，更能适应 React 的未来发展。</li></ol><h3 id="12-React和Vue的区别-⭐⭐⭐⭐"><a href="#12-React和Vue的区别-⭐⭐⭐⭐" class="headerlink" title="12. React和Vue的区别 ⭐⭐⭐⭐"></a>12. React和Vue的区别 ⭐⭐⭐⭐</h3><p><strong>共同点：</strong></p><ul><li>都将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库</li><li>都有自己的构建工具，能让你得到一个根据最佳实践设置的项目模板。</li><li>都使用了Virtual DOM（虚拟DOM）提高重绘性能</li><li>都有props的概念，允许组件间的数据传递</li><li>都鼓励组件化应用，将应用分拆成一个个功能明确的模块，提高复用性</li></ul><p><strong>不同点：</strong></p><ol><li>数据流：Vue默认支持数据双向绑定，而React一直提倡单向数据流</li><li>虚拟DOM：</li></ol><ul><li>Vue宣称可以更快地计算出Virtual DOM的差异，这是由于它在渲染过程中，会跟踪每一个组件的依赖关系，不需要重新渲染整个组件树。</li><li>对于React而言，每当应用的状态被改变时，全部子组件都会重新渲染。当然，这可以通过 PureComponent/shouldComponentUpdate这个生命周期方法来进行控制，但Vue将此视为默认的优化。</li></ul><ol start="3"><li>模板不同：React使用JSX拥抱JS，Vue使用模板拥抱html</li><li>实现监听数据变化的原理不同</li></ol><ul><li>Vue通过 getter/setter以及一些函数的劫持，能精确知道数据变化。</li><li>React默认是通过比较引用的方式（diff）进行的，如果不优化可能导致大量不必要的VDOM的重新渲染。</li></ul><ol start="5"><li>扩展方面：</li></ol><ul><li>react可以通过高阶组件来扩展</li><li>而vue需要通过mixins来扩展</li></ul><h3 id="13-介绍一下虚拟DOM和Diff算法-⭐⭐⭐⭐⭐"><a href="#13-介绍一下虚拟DOM和Diff算法-⭐⭐⭐⭐⭐" class="headerlink" title="13. 介绍一下虚拟DOM和Diff算法 ⭐⭐⭐⭐⭐"></a>13. 介绍一下虚拟DOM和Diff算法 ⭐⭐⭐⭐⭐</h3><p><strong>使用虚拟dom的原因</strong></p><ul><li>传统开发模式中，操作DOM时会从构建DOM树从头到尾走一遍流程，操作DOM时他不知道后面还会不会有DOM操作，操作十次就构建了十次，前面构建的就浪费了，这样白白浪费了性能。</li><li>虚拟DOM是将真实的DOM节点用JavaScript模拟出来，js对象表示dom结构，对象记录了dom节点的标签、属性和子节点将DOM变化的对比，放到 Js 层来做。</li><li>用JS对象模拟DOM节点的好处是，页面的更新可以先全部反映在JS对象(虚拟DOM)上，操作内存中的JS对象的速度显然要更快，等更新完成后，再将最终的JS对象映射成真实的DOM，交由浏览器去绘制。</li></ul><p><strong>diff算法：</strong></p><p><em>调和：</em> 将Virtual DOM树转换成actual DOM树的最少操作的过程，diff算法是调和的具体实现。</p><p><strong>diff策略</strong></p><p>React用 三大策略 将O(n^3)复杂度 转化为 O(n)复杂度</p><ol><li>策略一：忽略节点跨层级操作场景，两棵树只对同一层次节点，如果一个DOM节点在前后两次更新中跨越了层级，那么React不会尝试复用他。</li><li>策略二：默认拥有相同类的两个组件 生成相似的树形结构，拥有不同类的两个组件 生成不同的树形结构。比对时：两个不同类型的元素会产生出不同的树。如果元素由div变为p，React会销毁div及其子孙节点，并新建p及其子孙节点</li><li>策略三：开发者可以通过 key prop来暗示哪些子元素在不同的渲染下能保持稳定，对于同一层级的一组子节点，通过唯一id区分。</li></ol><p><strong>Diff流程</strong></p><ol><li>从Diff的入口函数reconcileChildFibers出发，该函数会根据newChild（即JSX对象）类型调用不同的处理函数</li><li>当newChild类型为object、number、string，代表同级只有一个节点，会进入单节点Diff处理，当newChild类型为Array，同级有多个节点，会进入多节点Diff处理</li><li>单节点Diff中首先判断是否存在对应的DOM节点，如果存在就判断能否复用，能否复用是通过key和type判断的，如果能复用就返回之前的副本，如果不能就删除节点并生成新的</li><li>多节点Diff中，有三种情况：节点更新，节点新增或减少，节点位置变化，会先判断情况，再决定走哪个逻辑，更新，新增还是删除，此时有两轮遍历，第一轮遍历：处理更新的节点。第二轮遍历：处理剩下的不属于更新的节点。</li></ol><h3 id="14-React怎么达到数据持久化-⭐⭐⭐"><a href="#14-React怎么达到数据持久化-⭐⭐⭐" class="headerlink" title="14. React怎么达到数据持久化 ⭐⭐⭐"></a>14. React怎么达到数据持久化 ⭐⭐⭐</h3><ul><li>通过redux存储全局数据时，如果用户刷新了网页，就会被全部清空，比如登录信息等。这时就会有全局数据持久化存储的需求。</li><li>首先想到的就是localStorage，localStorage是没有时间限制的数据存储，可以通过它来实现数据的持久化存储。但是在已经使用redux来管理和存储全局数据的基础上，再去使用localStorage来读写数据，这样不仅是工作量巨大，还容易出错。</li><li>所以用redux-persist。redux-persist会将redux的store中的数据缓存到浏览器的localStorage中</li></ul><h3 id="15-react-SSR服务端渲染-⭐⭐⭐"><a href="#15-react-SSR服务端渲染-⭐⭐⭐" class="headerlink" title="15. react SSR服务端渲染 ⭐⭐⭐"></a>15. react SSR服务端渲染 ⭐⭐⭐</h3><p><strong>客户端渲染：</strong></p><p>首先请求html，然后下载html里的js/css文件，等待js加载完后，再向服务器请求数据，数据返回后客户端从0到完整得渲染</p><p><em>缺点：</em></p><ul><li>由于页面显示过程要进行JS文件拉取和React代码执行，首屏加载时间会比较慢。</li><li>对于SEO(搜索引擎优化)，完全无能为力，因为搜索引擎爬虫只认识html结构的内容，而不能识别JS代码内容</li></ul><p><strong>服务端渲染：</strong></p><p>首先请求html，然后服务端请求数据，在服务端初始渲染，返回具有正确内容的界面，再请求js/css，返回后把剩下一小部分渲染完</p><p><em>优点：</em></p><ul><li>客户端渲染下，除了加载html,还要等待js/css加载完成，之后执行js渲染出页面，这个期间用户一直在等待</li><li>服务端只需要加载当前页面的内容，而不需要一次性加载全部的 js 文件。等待时间大大缩短，首屏加载变快。</li></ul><p><em>缺点：</em></p><ul><li>不利于前后端分离，开发效率低。</li><li>占用服务器资源。</li></ul><h3 id="16-React-createClass与React-Component区别：-⭐⭐⭐"><a href="#16-React-createClass与React-Component区别：-⭐⭐⭐" class="headerlink" title="16. React.createClass与React.Component区别： ⭐⭐⭐"></a>16. React.createClass与React.Component区别： ⭐⭐⭐</h3><ol><li>函数this自绑定</li></ol><ul><li>React.createClass创建的组件，其每一个成员函数的this都有React自动绑定，函数中的this会被正确设置。</li><li>React.Component创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。</li></ul><ol start="2"><li>组件属性类型propTypes及其默认props属性defaultProps配置不同</li></ol><ul><li>React.createClass在创建组件时，有关组件props的属性类型及组件默认的属性会作为组件实例的属性来配置，其中defaultProps是使用getDefaultProps的方法来获取默认组件属性的</li><li>React.Component在创建组件时配置这两个对应信息时，他们是作为组件类的属性，不是组件实例的属性，也就是所谓的类的静态属性来配置的。</li></ul><ol start="3"><li>组件初始状态state的配置不同</li></ol><ul><li>React.createClass创建的组件，其状态state是通过getInitialState方法来配置组件相关的状态；</li><li>React.Component创建的组件，其状态state是在constructor中像初始化组件属性一样声明的。</li></ul><h3 id="17-react渲染问题-⭐⭐⭐⭐"><a href="#17-react渲染问题-⭐⭐⭐⭐" class="headerlink" title="17. react渲染问题 ⭐⭐⭐⭐"></a>17. react渲染问题 ⭐⭐⭐⭐</h3><p><em>哪些方法会触发 react 重新渲染：</em></p><ol><li>setState（）方法被调用</li></ol><ul><li>当 setState 传入 null 时，并不会触发 render</li></ul><ol start="2"><li>父组件重新渲染</li></ol><ul><li>只要父组件重新渲染了，即使传入子组件的 props 未发生变化，那么子组件也会重新渲染，进而触发 render</li></ul><p><em>重新渲染 render 会做些什么?</em></p><ol><li>会对新旧 VNode 进行对比，也就是我们所说的Diff算法。</li><li>对新旧两棵树进行一个深度优先遍历，这样每一个节点都会一个标记，在到深度遍历的时候，每遍历到一和个节点，就把该节点和新的节点树进行对比，如果有差异就放到一个对象里面</li><li>遍历差异对象，根据差异的类型，根据对应对规则更新VNode</li><li>React 的处理 render 的基本思维模式是每次一有变动就会去重新渲染整个应用</li></ol><p><em>React如何判断什么时候重新渲染组件？</em></p><ul><li>组件状态的改变可以因为props的改变，或者直接通过setState方法改变。</li><li>组件获得新的状态，然后React决定是否应该重新渲染组件。只要组件的state发生变化，React就会对组件进行重新渲染。</li><li>因为React中的shouldComponentUpdate方法默认返回true，这就是导致每次更新都重新渲染的原因</li><li>需要重写shouldComponentUpdate方法让它根据情况返回true或者false来告诉React什么时候重新渲染什么时候跳过重新渲染</li></ul><h3 id="18-React-Router有哪两种模式-⭐⭐⭐⭐⭐"><a href="#18-React-Router有哪两种模式-⭐⭐⭐⭐⭐" class="headerlink" title="18. React Router有哪两种模式 ⭐⭐⭐⭐⭐"></a>18. React Router有哪两种模式 ⭐⭐⭐⭐⭐</h3><p>hash模式（默认）</p><p>如<a href="http://abc.com/#/user/10">http://abc.com/#/user/10</a></p><ol><li>hash 模式是一种把前端路由的路径用井号 # 拼接在真实 URL 后面的模式。当井号 # 后面的路径发生变化时，浏览器并不会重新发起请求，而是会触发 hashchange 事件，不会被包括在 HTTP 请求中。</li><li>在hash模式下，所有的页面跳转都是客户端进行操作，不需要后端的支持，因此对于页面拦截更加灵活，但每次url的改变不属于一次http请求</li><li>hash的改变不会导致页面的刷新，通过window.onhashchange监听hash的改变，借此实现无刷新跳转的功能<br>H5 history</li></ol><p>如<a href="http://abc.com/user/10">http://abc.com/user/10</a></p><ol><li>切换历史状态包括back、forward、go，修改历史状态包括了 pushState,  replaceState两个方法，通过pushState把页面的状态保存在state对象中，当页面的url再变回这个url时，可以通过event.state取到这个state对象，从而可以对页面状态进行还原</li><li>前端的URL必须和向发送请求后端URL保持一致，否则会报404错误。不怕前进，不怕后退，就怕刷新，f5，（如果后端没有准备的话，会返回404）,因为刷新是实实在在地去请求服务器的。</li><li>使用简单，比较美观</li></ol><h3 id="19-react-router-实现的思想：-⭐⭐⭐"><a href="#19-react-router-实现的思想：-⭐⭐⭐" class="headerlink" title="19. react-router 实现的思想： ⭐⭐⭐"></a>19. react-router 实现的思想： ⭐⭐⭐</h3><p>  基于 history 库来实现上述不同的客户端路由实现思想，并且能够保存历史记录等，磨平浏览器差异，上层无感知，通过维护的列表，在每次 URL 发生变化的回收，通过配置的 路由路径，匹配到对应的 Component，并且 render</p><h3 id="20-如何配置-React-Router-实现路由切换-⭐⭐⭐"><a href="#20-如何配置-React-Router-实现路由切换-⭐⭐⭐" class="headerlink" title="20. 如何配置 React-Router 实现路由切换: ⭐⭐⭐"></a>20. 如何配置 React-Router 实现路由切换: ⭐⭐⭐</h3><ol><li>使用<code>&lt;Route&gt; </code>组件</li><li>结合使用 <code>&lt;Switch&gt;</code> 组件和 <code>&lt;Route&gt;</code> 组件，一个 <code>&lt;Switch&gt;</code> 会遍历其所有的子 <code>&lt;Route&gt;</code>元素，并仅渲染与当前地址匹配的第一个元素。</li><li>使用 <code>&lt;Link&gt;、&lt;NavLink&gt;、&lt;Redirect&gt;</code> 组件</li></ol><ul><li>Link：<code>&lt;Link&gt;</code> 组件来在你的应用程序中创建链接。无论你在何处渲染一个<code>&lt;Link&gt;</code> ，都会在应用程序的 HTML 中渲染锚（<code>&lt;a&gt;</code>）</li><li>NavLink：<code>&lt;NavLink&gt;</code>会在匹配上当前的url的时候给已经渲染的元素添加参数（css样式等）</li><li>Redirect：<code>&lt;Redirect&gt;</code>组件实现路由的重定，属性一般使用from和to</li></ul><h3 id="21-react-router-里的-Link-标签和-a-标签的区别-⭐⭐⭐"><a href="#21-react-router-里的-Link-标签和-a-标签的区别-⭐⭐⭐" class="headerlink" title="21. react-router 里的 Link 标签和 a 标签的区别 ⭐⭐⭐"></a>21. react-router 里的 Link 标签和 a 标签的区别 ⭐⭐⭐</h3><p>从最终渲染的 DOM 来看，这两者都是链接，都是标签<br>区别∶</p><ul><li>  <code>&lt;Link&gt;</code>一般配合<code>&lt;Route&gt;</code> 使用，react-router接管了其默认的链接跳转行为</li><li>  <code>&lt;Link&gt;</code> 的“跳转”行为只会触发相匹配的<code>&lt;Route&gt;</code>对应的页面内容更新，而不会刷新整个页面。<br><code>&lt;Link&gt;</code>做了3件事情:</li><li>有onclick那就执行onclick</li><li>click的时候阻止a标签默认事件</li><li>根据跳转href(即是to)，用history (web前端路由两种方式之一，history 和 hash)跳转，此时只是链接变了，并没有刷新页面而<code>&lt;a&gt;</code>标签就是普通的超链接了，用于从当前页面跳转到href指向的另一 个页面(非锚点情况)。</li></ul><h3 id="22-React-Router如何获取URL的参数和历史对象（路由传值）：-⭐⭐⭐"><a href="#22-React-Router如何获取URL的参数和历史对象（路由传值）：-⭐⭐⭐" class="headerlink" title="22. React-Router如何获取URL的参数和历史对象（路由传值）： ⭐⭐⭐"></a>22. React-Router如何获取URL的参数和历史对象（路由传值）： ⭐⭐⭐</h3><p><strong>获取URL的参数：</strong></p><ol><li>路由配置还是普通的配置，如：<code>&#39;admin&#39;</code>，传参方式如：<code>&#39;admin?id=&#39;1111&#39;&#39;</code>。通过<code>this.props.location.search</code>获取url获取到一个字符串<code>&#39;?id=&#39;1111&#39;</code>,可以用url，qs，querystring，浏览器提供的api URLSearchParams对象或者自己封装的方法去解析出id的值。</li><li>动态路由传值：<code>通过this.props.match.params.id</code> 取得url中的动态路由id部分的值，除此之外还可以通过<code>useParams（Hooks）</code>来获取</li><li>通过query或state传值：在Link组件的to属性中可以传递对象<code>&#123;pathname:&#39;/admin&#39;,query:&#39;111&#39;,state:&#39;111&#39;&#125;</code>，通过<code>this.props.location.state或this.props.location.query</code>来获取即可，缺点：刷新页面数据丢失</li></ol><p><strong>获取历史对象：</strong></p><ol><li>useHistory();</li><li>使用this.props.history获取历史对象</li></ol><h3 id="23-介绍一下Redux-⭐⭐⭐⭐⭐"><a href="#23-介绍一下Redux-⭐⭐⭐⭐⭐" class="headerlink" title="23. 介绍一下Redux ⭐⭐⭐⭐⭐"></a>23. 介绍一下Redux ⭐⭐⭐⭐⭐</h3><p>Redux是React的一个状态管理库，它基于flux，简化了React中的单向数据流，状态管理完全从React中抽象出来。</p><p><em>工作流程：</em></p><ul><li>在React中，组件连接到redux ，如果要访问redux，需要派发一个action到 Reducer。</li><li>当reducer收到action时，通过 switch…case 语法比较 action 中type。 匹配时，更新对应的内容返回新的 state。</li><li>当Redux状态更改时，连接到Redux的组件将接收新的状态作为props。当组件接收到这些props时，它将进入更新阶段并重新渲染 UI。</li></ul><p><strong>Redux 的三大原则：</strong></p><ol><li>单一数据源（一个Redux应用只有一个store），也是单向的数据流；</li><li>state只读（唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。）；</li><li>使用纯函数（reducer）来修改state。</li></ol><p><strong>Redux中间件：</strong></p><ul><li>Redux 的中间件提供的是位于 action 被发起之后，到达 reducer 之前的扩展点，</li><li>原本 view -→&gt; action -&gt; reducer -&gt; store 的数据流加上中间件后变成了 view -&gt; action -&gt; middleware -&gt; reducer -&gt; store</li><li>在这一环节可以做一些”副作用”的操作，如异步请求、打印日志等</li><li>redux中间件接受一个对象作为参数，对象的参数上有两个字段 dispatch 和 getState，分别代表着 Redux Store 上的两个同名函数。</li><li>柯里化函数两端一个是 middewares，一个是store.dispatch</li></ul><h3 id="24-Redux-和-Vuex-有什么区别，它们的共同思想-⭐⭐⭐⭐"><a href="#24-Redux-和-Vuex-有什么区别，它们的共同思想-⭐⭐⭐⭐" class="headerlink" title="24. Redux 和 Vuex 有什么区别，它们的共同思想 ⭐⭐⭐⭐"></a>24. Redux 和 Vuex 有什么区别，它们的共同思想 ⭐⭐⭐⭐</h3><p><strong>共同点：</strong></p><ol><li>都是通过store来作为全局状态存储对象。</li><li>不能直接修改Store中状态，（vuex中的mutation、redux中的reducer），只允许同步操作；</li></ol><p><strong>不同点：</strong></p><ol><li>Vuex取消了Redux中Action的概念。不同于Redux认为状态变更必须是由一次”行为”触发，Vuex仅仅认为在任何时候触发状态变化只需要进行mutation即可。Redux的Action必须是一个对象，而 Vuex认为只要传递必要的参数即可，形式不做要求。</li><li> Vuex也弱化了Redux中的reducer的概念。reducer在计算机领域语义应该是”规约”，在这里意思应该是根据旧的state和Action的传入参数，“规约”出新的state。在 Vuex中，对应的是mutation，即”转变”，只是根据入参对旧state进行”转变”而已。</li></ol><h3 id="25-connect有什么作用：-⭐⭐⭐⭐"><a href="#25-connect有什么作用：-⭐⭐⭐⭐" class="headerlink" title="25. connect有什么作用： ⭐⭐⭐⭐"></a>25. connect有什么作用： ⭐⭐⭐⭐</h3><p>负责连接React和Redux</p><p><strong>获取state</strong></p><p>connect 通过 context获取 Provider 中的 store，通过 store.getState() 获取整个store tree 上所有state</p><p><strong>使用</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>AppUI<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//也可使用装饰器</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>mapStateToProps：</em> 此函数将state映射到 props 上，因此只要state发生变化，新 state 会重新映射到 props。 这是订阅store的方式。</p><p><em>mapDispatchToProps：</em> 用来建立组件的参数到store.dispatch方法的映射。触发action更新reducer，进而更新state，引起UI数据的变化</p><h3 id="24-介绍一下hooks特点，和类组件的区别"><a href="#24-介绍一下hooks特点，和类组件的区别" class="headerlink" title="24. 介绍一下hooks特点，和类组件的区别"></a>24. 介绍一下hooks特点，和类组件的区别</h3><p><strong>函数组件的特点：</strong></p><ul><li>没有组件实例</li><li>没有生命周期</li><li>没有state和setState，只能接收props</li></ul><p><strong>class组件的问题：</strong></p><ul><li>大型组件很难拆分和重构，很难测试（即class不易拆分）</li><li>相同业务逻辑，分散到各个方法中，逻辑混乱</li><li>复用逻辑变得复杂，如mixins，HOC，Render Props</li><li>生命周期复杂</li></ul><p><strong>React Hooks 解决了哪些问题：</strong></p><ul><li>在组件之间复用状态逻辑很难，Hook 使我们在无需修改组件结构的情况下复用状态逻辑</li><li>复杂组件变得难以理解，比如componentDidMount里很多不同的逻辑，而hooks有助于关注分离，可以一个逻辑写在一堆</li><li>难以理解的this指向，hooks里没有this</li><li>复杂的生命周期</li></ul><h3 id="25-介绍一下知道的Hooks"><a href="#25-介绍一下知道的Hooks" class="headerlink" title="25. 介绍一下知道的Hooks"></a>25. 介绍一下知道的Hooks</h3><p><strong>useState：</strong></p><p>useState 是允许我们在 React 函数组件中添加 state 的一个 Hook</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">[</span>当前状态的值<span class="token punctuation">,</span> 设置状态值的函数<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span>初始值<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>和类组件state区别：</em><br>类组件中的 state 只能有一个。一般是把一个对象作为一个 state，然后再通过对象不同的属性来表示不同的状态。<br>而函数组件中用 useState 则可以很容易地创建多个 state，更加语义化。</p><p><em>为什么 useState 要使用数组而不是对象：</em> 为了降低使用的复杂度，返回数组的话可以直接根据顺序解构，而返回对象的话要想使用多次就需要定义别名了</p><p><strong>Effect Hook：</strong></p><p>让函数组件模拟生命周期，默认函数组件没有生命周期<br><br>函数组件是一个纯函数，执行完即销毁，自己无法实现生命周期，使用Effect Hook把生命周期钩到纯函数中</p><p><em>useEffect</em></p><ul><li>没有依赖项，那它会在每次render之后执行</li><li>模拟componentDidMount-useEffect依赖[]</li><li>模拟componentDidUpdate-useEffect无依赖，或者依赖[a, b]</li><li>模拟componentWillUnMount-useEffect中返回一个函数</li></ul><p><em>ps：</em></p><ul><li>此时并不完全等同于WillUnMount，准确的说里面return的函数，会在下一次effect执行之前，被执行</li><li>也就是说如果当前useEffect模拟的是Mount和Update，在props发生变化，Update前也会执行return里的</li></ul><p>useEffect让纯函数有了副作用，副作用就是对函数之外造成影响，如设置全局定时任务，而组件需要副作用，所以需要useEffect钩到纯函数中</p><p><em>useEffect 与 useLayoutEffect 的区别：</em></p><ul><li>两者都是用于处理副作用，底层的函数签名是完全一致的</li><li>useEffect 是渲染完之后异步执行的，所以可能会导致闪烁</li><li>useLayoutEffect是同步执行的，执行时机是浏览器把内容真正渲染到界面之前，等它执行完再渲染上去，就避免了闪烁现象。</li><li>也就是说我们最好把操作 dom 的相关操作放到 useLayoutEffect 中去，避免导致闪烁。</li></ul><p><strong>useCallback：</strong></p><p>  主要用于缓存函数，函数式组件每次任何一个 state 的变化都会导致整个组件刷新，一些函数是没有必要被重新刷新的，此时就应该缓存起来，提高性能</p><p><strong>useMemo：</strong></p><p>  主要用于缓存计算结果的值，一般是针对组件的, 减少组件的不必要更新.</p><p><strong>useRef</strong></p><ul><li>返回一个可变的 ref 对象，其.current 属性被初始化为传入的参数。</li><li>返回的 ref 对象在组件的整个生命周期内保持不变，也就是说每次重新渲染函数组件时，返回的 ref 对象都是同一个。</li></ul><p><em>应用场景：</em></p><ol><li>用于获取DOM节点<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> btnRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>button ref<span class="token operator">=</span><span class="token punctuation">&#123;</span>btnRef<span class="token punctuation">&#125;</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>获取子组件的实例(只有类组件可用)</li><li>在函数组件中的一个全局变量，不会因为重复 render 重复申明， 类似于类组件的 this.xxx</li></ol><p><strong>useContext:</strong></p><p>接收一个 context 对象（React.createContext 的返回值）并返回该 context 的当前值</p><p><strong>useReducer</strong></p><p>useState 的替代方案，接收一个reducer，并返回当前的 state 以及与其配套的 dispatch 方法</p><p><em>适用场景：</em></p><ul><li>state 逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state</li><li>使用 useReducer 还能给那些会触发深更新的组件做性能优化</li></ul><p><em>useReducer和redux的区别</em></p><ul><li>useReducer是useState的代替方案，用于state复杂变化</li><li>useReducer是单个组件状态管理，组件通讯还需要props</li><li>redux是全局的状态管理，多组件共享数据</li></ul><h2 id="感谢阅读"><a href="#感谢阅读" class="headerlink" title="感谢阅读"></a>感谢阅读</h2><p>非常感谢您到阅读到最后，如果有错误希望您能够指出，以免误导其他人，如果您觉得对您有帮助的话，希望能够点个赞，加个关注，有任何问题都可以联系我，希望能够一起进步。</p><p>最后祝您前程似锦，我们各自攀登，高处相见🌈！</p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础--计算机网络</title>
      <link href="/2021/07/15/qian-duan-ji-chu-ji-suan-ji-wang-luo/"/>
      <url>/2021/07/15/qian-duan-ji-chu-ji-suan-ji-wang-luo/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>计算机网络知识是每个程序员的必备基础，任何消息文件的传输都与网络相关，本文介绍了作为一个前端应该掌握的计算机网络基础知识</p><p>食用对象：初级前端</p><p>美味指数：😋😋😋😋😋</p><h3 id="1-介绍一下http状态码？⭐⭐⭐⭐⭐"><a href="#1-介绍一下http状态码？⭐⭐⭐⭐⭐" class="headerlink" title="1. 介绍一下http状态码？⭐⭐⭐⭐⭐"></a>1. 介绍一下http状态码？⭐⭐⭐⭐⭐</h3><p>状态码分类：</p><ul><li>1xx服务器收到请求</li><li>2xx请求成功</li><li>3xx重定向</li><li>4xx客户端错误</li><li>5xx服务端错误<br>常见状态码：</li><li>200 成功</li><li>301 永久重定向(配合location, 浏览器自动处理)</li><li>302 临时重定向(配合location, 浏览器自动处理)</li><li>304 资源未被修改(去请求服务端，服务端告诉这个资源在本地还有效，不用再请求)</li><li>403 Forbidden: 服务器禁止访问，原因有很多，比如法律禁止、信息敏感、没有权限。</li><li>404 资源未找到</li><li>405: 请求方法不被服务器端允许。</li><li>500: 仅仅告诉服务器出错了</li><li>501: 表示客户端请求的功能还不支持。</li><li>502: 服务器自身是正常的，但访问的时候出错了</li><li>503: 表示服务器当前很忙，暂时无法响应服务。</li></ul><h3 id="2-介绍一下你知道的http-headers？⭐⭐⭐"><a href="#2-介绍一下你知道的http-headers？⭐⭐⭐" class="headerlink" title="2. 介绍一下你知道的http headers？⭐⭐⭐"></a>2. 介绍一下你知道的http headers？⭐⭐⭐</h3><p>常见的Request Headers：</p><ul><li>Accept浏览器可接收的数据格式</li><li>Accept-Encoding浏览器可接收的压缩算法，如gzip</li><li>Accept-language浏览器可接收的语言，如zh-CN</li><li>Connection：keep-alive一次TCP连接重复使用</li><li>cookie 本地信息</li><li>Host 访问的服务器的域</li><li>User-Agent(简称UA)浏览器信息</li><li>Content-type发送数据的格式，如application/json<br>Response Headers：</li><li>Content-type 返回数据的格式，如application/json</li><li>Content-length 返回数据的大小，多少字节</li><li>Content-Encoding返回数据的压缩算法，如gzip</li><li>Set-cookie 服务端需要改cookie可以用这个</li></ul><h3 id="3-能否说一下浏览器缓存？⭐⭐⭐⭐⭐"><a href="#3-能否说一下浏览器缓存？⭐⭐⭐⭐⭐" class="headerlink" title="3. 能否说一下浏览器缓存？⭐⭐⭐⭐⭐"></a>3. 能否说一下浏览器缓存？⭐⭐⭐⭐⭐</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3cd482b9711349948537a8588fbfbea4~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>强缓存：<br><br>首先是检查强缓存，此时不需要发送HTTP请求。<br>有Expires和Cache-Control两个字段<br>Expires<br><br><code>Expires</code>即过期时间，存在于服务端返回的响应头中，告诉浏览器在这个过期时间之前可以直接从缓存里面获取数据，无需再次请求。<br>缺点：<br>服务器的时间和浏览器的时间可能并不一致，那服务器返回的这个过期时间可能就是不准确的。因此这个字段后来被抛弃了<br>Cache-Control <br><br>这个字段也是存在于它和<code>Expires</code>本质的不同在于它并没有采用具体的过期时间点这个方式，而是采用<code>过期时长</code>来控制缓存</p><p>cache-control的值:</p><ul><li>max-age:设置s级别的缓存的最大过期时间</li><li>no-cache:不用强制缓存，交给服务端处理</li><li>no-store:不用强制缓存，也不用服务端的缓存措施</li><li>private:只允许最终用户做缓存</li><li>public:允许中间的代理，路由等做缓存<br>当<strong>Expires</strong>和<strong>Cache-Control</strong>同时存在的时候，<strong>Cache-Control</strong>会优先考虑。</li></ul><p>协商缓存：<br><br>强缓存失效之后，浏览器在请求头中携带相应的<strong>Last-Modified</strong> 或 <strong>ETag</strong>来向服务器发请求，由服务器根据这个值，来决定是否使用缓存，这就是<strong>协商缓存</strong>。<br>Last-Modified <br><br>最后修改时间</p><ul><li>在浏览器第一次给服务器发送请求后，服务器会在响应头中加上这个字段。</li><li>浏览器接收到后，如果再次请求，会在请求头中携带<code>If-Modified-Since</code>字段，这个字段的值也就是服务器传来的最后修改时间。</li><li>服务器拿到请求头中的<code>If-Modified-Since</code>的字段后，其实会和这个服务器中<code>该资源的最后修改时间</code>对比:</li></ul><ol><li>如果请求头中的这个值小于最后修改时间，说明是时候更新了。返回新的资源，跟常规的HTTP请求响应的流程一样。</li><li>否则返回304，告诉浏览器直接用缓存。</li></ol><p>ETag <br><br><code>ETag</code> 是服务器根据当前文件的内容，给文件生成的唯一标识，只要里面的内容有改动，这个值就会变。</p><ul><li>服务器通过<code>响应头</code>把这个值给浏览器。</li><li>浏览器接收到<code>ETag</code>的值，会在下次请求时，将这个值作为<strong>If-None-Match</strong>这个字段的内容，并放到请求头中，然后发给服务器。</li><li>服务器接收到<strong>If-None-Match</strong>后，会跟服务器上该资源的<strong>ETag</strong>进行比对:</li></ul><ol><li>如果两者不一样，说明要更新了。返回新的资源，跟常规的HTTP请求响应的流程一样。</li><li>否则返回304，告诉浏览器直接用缓存。</li></ol><h3 id="4-介绍一下刷新操作与缓存的关系⭐⭐"><a href="#4-介绍一下刷新操作与缓存的关系⭐⭐" class="headerlink" title="4. 介绍一下刷新操作与缓存的关系⭐⭐"></a>4. 介绍一下刷新操作与缓存的关系⭐⭐</h3><p>三种刷新操作：</p><ul><li>正常刷新：地址栏输入url，跳转链接，前进后退等</li><li>手动刷新：F5，点击刷新按钮，右击菜单刷新</li><li>强制刷新：ctrl + F5</li></ul><p>不同刷新操作，不同的缓存策略：</p><ul><li>正常刷新：强制缓存有效，协商缓存有效</li><li>手动刷新：强制缓存失效，协商缓存有效</li><li>强制刷新：强制缓存失效，协商缓存失效</li></ul><h3 id="5-从输入url到浏览器渲染流程⭐⭐⭐⭐⭐"><a href="#5-从输入url到浏览器渲染流程⭐⭐⭐⭐⭐" class="headerlink" title="5. 从输入url到浏览器渲染流程⭐⭐⭐⭐⭐"></a>5. 从输入url到浏览器渲染流程⭐⭐⭐⭐⭐</h3><ol><li>按下回车后，浏览器首先会解析这个域名，查看本地的hosts文件，看有没有对应的规则，有就直接用hosts里面的IP</li><li>如果hosts没有对应ip，浏览器就会发出一个DNS请求到本地DNS服务器，本地服务器如果有就直接返回，没有就向DNS根服务器查询DNS根服务器又会返回域服务器的地址，本地服务器会继续向域服务器发起请求，域服务器会返回域名的解析服务器的地址。本地服务器继续向域名解析服务器发起请求，这时会受到域名对应的ip，本地DNS服务器将ip返回给浏览器，并将ip存入缓存，方便下次访问。</li><li>拿到ip地址后，会向对应的web服务器发起TCP请求，通过三次握手，建立TCP连接。</li><li>服务器受到请求后，解析用户请求，知道了要调度哪个资源文件，处理用户的请求和参数，并调用数据库信息，最后将结果返回给服务器。</li><li>关闭TCP连接，通过四次挥手</li><li>浏览器获取HTML并开始构建DOM树，DOM树的构建是一个深度遍历的过程。</li><li>获取CSS并构建CSSOM，构建CSSOM并不需要等待所有DOM都构建完毕，CSS的加载速度与构建CSSOM的速度将直接影响首屏渲染速度，所以CSS 放头部，可以提高页面的性能。早构建早渲染。</li><li>将DOM与CSSOM结合，创建渲染树（Render Tree），Render Tree的每个节点都有了样式信息。</li><li>布局(layout)，找到所有内容都处于网页的哪个位置。根据渲染树来布局，以计算每个节点的几何信息，即在屏幕上的确切位置和大小，所有相对值都将转换为屏幕上的绝对像素</li><li>绘制(painting)，浏览器开始在屏幕上绘制像素。将各个节点绘制到屏幕上。</li></ol><h3 id="6-那说一下DOM树和CSSOM的构建过程？⭐⭐⭐"><a href="#6-那说一下DOM树和CSSOM的构建过程？⭐⭐⭐" class="headerlink" title="6. 那说一下DOM树和CSSOM的构建过程？⭐⭐⭐"></a>6. 那说一下DOM树和CSSOM的构建过程？⭐⭐⭐</h3><p>DOM树和CSSOM的构建过程其实差不多</p><ol><li>首先解析文件（HTML文件，CSS文件）</li><li>将字节转换成字符</li><li>确定tokens（标签）</li><li>将tokens转换成节点</li><li>最后根据节点构建DOM树 || CSSOM</li></ol><p>PS：构建DOM树的图和CSSOM的图，一看就明白</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1bb7be3820f64a45b891d88ac10a59d2~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/887641ec6517487bb8b05e7bb2726ca4~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h3 id="7-说一下HTTPS？⭐⭐⭐⭐⭐"><a href="#7-说一下HTTPS？⭐⭐⭐⭐⭐" class="headerlink" title="7. 说一下HTTPS？⭐⭐⭐⭐⭐"></a>7. 说一下HTTPS？⭐⭐⭐⭐⭐</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c04e9a0cf0d4fe4b9f67f57bf3bd100~tplv-k3u1fbpfcp-watermark.image" alt="185797810_2_20200319111944225.jfif"><br>https：<br><br>证书生成过程：<br></p><ol><li>服务器会自己生成一个私钥和公钥，CA公司自己也有一个公钥和私钥</li><li>服务器向认证机构请求签字认证，认证机构用自己的私钥签字，于是任何有认证机构公钥的人都知道证书是它签过字的</li><li>一般浏览器都有认证机构的名单和公钥，通过公钥认证就可以知道服务器是对的（因为信任认证机构，所以信任服务器）<br>浏览器与服务器：<br></li><li>浏览器要访问一个服务器，服务器把证书和自己的公钥发过来。</li><li>浏览器信任认证机构，解密后确认服务器正确，于是创建了一个随机密钥且用服务器的公钥加密</li><li>此时只有服务器能够解密出浏览器的随机密钥，于是通信就用随机密钥对称加密</li></ol><h3 id="8-说一下http各个版本的区别？⭐⭐⭐⭐"><a href="#8-说一下http各个版本的区别？⭐⭐⭐⭐" class="headerlink" title="8. 说一下http各个版本的区别？⭐⭐⭐⭐"></a>8. 说一下http各个版本的区别？⭐⭐⭐⭐</h3><p>http/0.9版本：</p><ul><li>  只有一个命令GET,只支持纯文本内容</li><li>  每次请求后，服务器和客户端之间的连接都将关闭。<br>http1.0版本:</li><li>  扩充了传输内容格式，这使得互联网不仅可以传输文字，还能传输图像、视频、二进制等文件。</li><li>  除了GET命令，还引 入了POST命令和HEAD命令。</li><li>  默认不支持长连接，为了解决这个问题，浏览器用了一个非标准的Connection字段，设置keep-alive。<br>http1.1版本:</li><li>  引入了持久连接，即TCP连接默认不关闭，可以被多个请求复用，不用声明Connection: keep-alive。</li><li>  引入了管道机制，即在同一个TCP连接里，客户端可以同时发送多个请求，进一步改进了HTTP协议的效率。</li><li>  新增方法：PUT、 PATCH、 OPTIONS、 DELETE。</li><li>  客户端请求的头信息新增了Host字段，用来指定服务器的域名</li><li>  http协议不带有状态，每次请求都必须附上所有信息。请求的很多字段都是重复的，浪费带宽，影响速度。<br>http2.0版本</li><li>  二进制分帧：在HTTP1.x中，我们是通过文本的方式传输数据，文本的表现形式有多样性，因此要做到健壮性考虑的场景必然有很多，而二进制做到健壮和方便就要轻松许多。</li><li>  多路复用：避免HTTP旧版本的队头阻塞问题，极大提高传输性能</li><li>  头部压缩</li><li>  服务器推送</li></ul><p>http1.1的长连接和http2.0的多路复用的区别？</p><ul><li>http1.1之前一次请求就会建立一次连接，http1.1通过管道化方式实现多个请求串行化共享同一个连接，但是一旦某个请求耗时严重，就导致后面的请求被阻塞，俗称线头阻塞；</li><li>http2.0多个请求共享同一个连接，并且是并行的，所有请求不会影响其他请求；</li></ul><h3 id="9-介绍一下CDN？⭐⭐⭐"><a href="#9-介绍一下CDN？⭐⭐⭐" class="headerlink" title="9. 介绍一下CDN？⭐⭐⭐"></a>9. 介绍一下CDN？⭐⭐⭐</h3><p>CDN的全称是Content Delivery Network，即内容分发网络。<br><br>含义：</p><ul><li>它将网站的内容通过中心平台分发到部署在各地的边缘服务器进行缓存，再通过负载均衡技术将用户的请求转发到就近的服务器上去获取所需内容，降低网络堵塞，提供访问网站的响应速度和命中率。<br>过程:</li><li>域名解析后会指向一个CDN网络专用的DNS服务器</li><li>然后这个专门的CDN  DNS服务器会指向CDN负载均衡服务器</li><li>之后又去访问这个负载均衡服务器，它会根据浏览器的网络地址，选择一台cdn服务器给你，可能是离你比较近，然后被分配的网络任务又不多的一台服务器，浏览器又会去访问这个cdn服务器</li><li>如果这个cdn服务器没有相应的资源，就去上层缓存服务器查找，如果一直找都没有就会去源站拉取，并在每个cdn服务器缓存</li></ul><h3 id="10-介绍一下cookie，localStorage和sessionStorage？⭐⭐⭐⭐⭐"><a href="#10-介绍一下cookie，localStorage和sessionStorage？⭐⭐⭐⭐⭐" class="headerlink" title="10. 介绍一下cookie，localStorage和sessionStorage？⭐⭐⭐⭐⭐"></a>10. 介绍一下cookie，localStorage和sessionStorage？⭐⭐⭐⭐⭐</h3><p>cookie：<br><br>本身为了弥补<code>HTTP</code>在<strong>状态管理上的不足</strong>，用于浏览器和server通讯，被”借用”到本地存储来，可用document.cookie = ‘…’来修改<br><br>缺点<br></p><ul><li>  存储大小太小, 最大4KB</li><li>  http请求时需要发送到服务端，增加请求数据量</li><li>  不安全，以纯文本的形式在浏览器和服务器中传递，很容易被非法用户截获，然后进行一系列的篡改，在 Cookie 的有效期内重新发送给服务器，这是相当危险的</li><li>  只能用document.cookie = ‘…’来修改，太过简陋<br>设置：<br></li><li>  客户端发送 HTTP 请求到服务器</li><li>  当服务器收到 HTTP 请求时，在响应头里面添加一个 Set-Cookie 字段</li><li>  浏览器收到响应后保存下 Cookie</li><li>  之后对该服务器每一次请求中都通过 Cookie 字段将 Cookie 信息发送给服务器。</li></ul><p>localStorage和sessionStorage</p><ul><li>  HTML5专门为存储而设计，最大可存5M</li><li>  API简单易用 setItem getItem</li><li>  不会随着http请求被发送出去<br>区别：</li><li>  localStorage数据会永久存储，除非代码或手动删除，适合持久化缓存数据，比如页面的默认偏好配置，如官网的logo，存储Base64格式的图片资源等</li><li>  sessionStorage数据只存在于当前会话，浏览器关闭则清空，适合一次性临时数据保存，存储本次浏览信息记录</li><li>  一般用localStorage</li></ul><p>cookie localStorage sessionStorage区别</p><ul><li>  存储大小：cookie4K，storage5M</li><li>  有效期：cookie拥有有效期，storage永久存储</li><li>  cookie会跟随http发送到服务器端，存储在内存。storage只存储在浏览器端</li><li>  路径：cookie有路径限制，storage只存储在域名下</li><li>  API：Storage的API更具有易用性</li></ul><h3 id="11-介绍一下websocket？⭐⭐⭐"><a href="#11-介绍一下websocket？⭐⭐⭐" class="headerlink" title="11. 介绍一下websocket？⭐⭐⭐"></a>11. 介绍一下websocket？⭐⭐⭐</h3><p>websocket的由来。<br><br>HTTP 协议有一个缺陷：通信只能由客户端发起。<br></p><p>特点:<br><br>    最大的特点是服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话<br><br>    数据格式比较轻量，性能开销小，通信高效<br><br>    与 HTTP 协议有着良好的兼容性<br><br>    没有同源限制，客户端可以与任意服务器通信<br></p><p>WebSocket 对象作为一个构造函数，用于新建 WebSocket 实例。<br><br>var ws = new WebSocket(‘ws://localhost:8080’);<br></p><p>属性举例：<br><br>实例对象的onopen属性，用于指定连接成功后的回调函数。<br></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello Server!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实例对象的onclose属性，用于指定连接关闭后的回调函数<br><br>实例对象的onmessage属性，用于指定收到服务器数据后的回调函数<br><br>实例对象的onerror属性，用于指定报错时的回调函数</p><h3 id="12-介绍一下计算机网络有哪几层？⭐⭐⭐⭐"><a href="#12-介绍一下计算机网络有哪几层？⭐⭐⭐⭐" class="headerlink" title="12. 介绍一下计算机网络有哪几层？⭐⭐⭐⭐"></a>12. 介绍一下计算机网络有哪几层？⭐⭐⭐⭐</h3><ul><li>应用层：文件传输，电子邮件，文件服务，虚拟终端 TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet</li><li>表示层：数据格式化，代码转换，数据加密 没有协议</li><li>会话层：解除或建立与别的接点的联系 没有协议</li><li>传输层：提供端对端的接口 TCP，UDP</li><li>网络层：为数据包选择路由 IP，ICMP，RIP，OSPF，BGP，IGMP</li><li>数据链路层：传输有地址的帧以及错误检测功能 SLIP，CSLIP，PPP，ARP，RARP，MTU</li><li>物理层：以二进制数据形式在物/理媒体上传输数据</li></ul><h3 id="13-介绍一下UDP协议？⭐⭐⭐"><a href="#13-介绍一下UDP协议？⭐⭐⭐" class="headerlink" title="13.介绍一下UDP协议？⭐⭐⭐"></a>13.介绍一下UDP协议？⭐⭐⭐</h3><p>UDP:</p><ol><li>在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议</li><li>有单播，多播，广播的功能</li><li>UDP是面向报文的</li><li>不可靠性，不会关心对方是否已经正确接收到数据了</li><li>头部开销小，传输数据报文时是很高效的</li></ol><h3 id="14-介绍一下TCP协议？⭐⭐⭐⭐"><a href="#14-介绍一下TCP协议？⭐⭐⭐⭐" class="headerlink" title="14.介绍一下TCP协议？⭐⭐⭐⭐"></a>14.介绍一下TCP协议？⭐⭐⭐⭐</h3><p>TCP：</p><ol><li>一种面向连接的、可靠的传输层通信协议</li><li>连接时需要进行三次握手，释放时需要进行四次挥手</li><li>每条TCP传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。</li><li>拥有拥塞控制，提供全双工通信</li></ol><h3 id="15-流量控制和拥塞控制的区别⭐⭐⭐"><a href="#15-流量控制和拥塞控制的区别⭐⭐⭐" class="headerlink" title="15. 流量控制和拥塞控制的区别⭐⭐⭐"></a>15. 流量控制和拥塞控制的区别⭐⭐⭐</h3><p>流量控制和拥塞控制的区别：</p><ul><li>流量控制是为了解决发送方和接收方速度不同而导致的数据丢失问题，当发送方发送的太快，接收方来不及接受就会导致数据丢失，流量控制用滑动窗口的形式解决问题</li><li>拥塞控制是为了解决过多的数据注入到网络，导致网络奔溃，超过负荷.当发送方发送数据大量的数据会注入到网络，如果没有限制，网络就会超负荷变卡，拥塞控制的用的是拥塞窗口解决的问题的</li></ul><h3 id="16-讲一下TCP三次握手⭐⭐⭐⭐⭐"><a href="#16-讲一下TCP三次握手⭐⭐⭐⭐⭐" class="headerlink" title="16.讲一下TCP三次握手⭐⭐⭐⭐⭐"></a>16.讲一下TCP三次握手⭐⭐⭐⭐⭐</h3><p>TCP三次握手；</p><ol><li>首先客户端发一个SYN报文，SYN=1，和一个初始序号seq=x，进入SYN_SEND状态</li><li>服务器收到客户端的SYN报文后，也会发送一个SYN=1，同时把客户端的序号seq+1作为ack的值返回，还会发送一个自己的序号seq=y，此时服务器进入SYN_RECD状态。</li><li>客户端收到SYN报文后，会发送一个ACK报文，就是把服务端的seq+1返回，还会发送自己的seq=x+1，当服务器收到ACK报文后，就处于ESTABLISHED状态，双方建立了连接</li></ol><h3 id="17-为什么需要三次握手，两次不行吗？⭐⭐⭐⭐⭐"><a href="#17-为什么需要三次握手，两次不行吗？⭐⭐⭐⭐⭐" class="headerlink" title="17. 为什么需要三次握手，两次不行吗？⭐⭐⭐⭐⭐"></a>17. 为什么需要三次握手，两次不行吗？⭐⭐⭐⭐⭐</h3><p>需要三次握手才能确认双方都有接收与发送能力，如果只有两次握手，如果客户端的一次请求滞留很久到，就会导致服务器一直等待客户端发送数据，浪费资源</p><h3 id="18-什么是半连接队列？⭐⭐⭐"><a href="#18-什么是半连接队列？⭐⭐⭐" class="headerlink" title="18. 什么是半连接队列？⭐⭐⭐"></a>18. 什么是半连接队列？⭐⭐⭐</h3><p>服务器第一次收到客户端的SYN之后，就会处于SYN_RCVD状态，此时双方还没有完全建立连接，服务器会把此种状态下请求连接放在一个队列里，就称之为半连接队列</p><h3 id="19-三次握手中可以携带数据吗？⭐⭐⭐⭐"><a href="#19-三次握手中可以携带数据吗？⭐⭐⭐⭐" class="headerlink" title="19. 三次握手中可以携带数据吗？⭐⭐⭐⭐"></a>19. 三次握手中可以携带数据吗？⭐⭐⭐⭐</h3><ul><li>第三次握手时可以，第一次和第二次不行，第一次携带数据，有人在第一次握手中的SYN报文中注入大量数据，攻击者不会理会服务器的接收，发送能力是否正常，疯狂发送报文的话，会让服务器花很多时间来接收，而第三次的话，此时客户端已经处于ESTABLISHED状态，对于客户端来说，已经建立连接了，并且知道服务器的接收和发送能力是正常的了，所以能携带数据也正常</li></ul><h3 id="20-介绍一下TCP四次挥手⭐⭐⭐⭐⭐"><a href="#20-介绍一下TCP四次挥手⭐⭐⭐⭐⭐" class="headerlink" title="20. 介绍一下TCP四次挥手⭐⭐⭐⭐⭐"></a>20. 介绍一下TCP四次挥手⭐⭐⭐⭐⭐</h3><p>以客户端想要关闭为例子：</p><ol><li>发出连接释放报文段(FIN=1，序号seq=u)，并停止发送数据，主动关闭TCP连接，进入FIN_WAIT1状态，等待服务端的确认</li><li>服务端收到连接释放报文段后发出确认报文段（ACK=1，确认号ack=u+1，序号seq=v），服务端进入CLOSE_WAIT状态，此时TCP处于半关闭状态，当客户端收到服务端的连接释放时，进入FIN_WAIT2状态，等待服务端发出连接释放报文段</li><li>如果服务端也想断开连接了，就发送连接释放报文段(FIN=1，ACK=1，seq=w，ack=u+1)，服务端进入LAST_ACK(最后确认)状态，等待客户端的确认</li><li>客户端收到连接释放报文段后，发出确认报文段(ACK=1，seq=u+1，ack=w+1)，客户端进入TIME_WAIT状态。此时TCP未释放掉，需要经过时间等待计时器设置的实践2MSL(最长报文段寿命的2倍)后客户端才进入CLOSED状态</li></ol><h3 id="21-为什么需要四次挥手？⭐⭐⭐⭐⭐"><a href="#21-为什么需要四次挥手？⭐⭐⭐⭐⭐" class="headerlink" title="21. 为什么需要四次挥手？⭐⭐⭐⭐⭐"></a>21. 为什么需要四次挥手？⭐⭐⭐⭐⭐</h3><p>因为关闭连接时，当服务端收到FIN报文时，很可能不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉客户端，你发的FIN报文我收到了，<br>只有等我服务端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。</p><h3 id="22-为什么需要等待2MSL⭐⭐⭐"><a href="#22-为什么需要等待2MSL⭐⭐⭐" class="headerlink" title="22. 为什么需要等待2MSL⭐⭐⭐"></a>22. 为什么需要等待2MSL⭐⭐⭐</h3><p>为了保证客户端发送的最后一个ACK报文段能够到达服务器，如果ACK丢失后了，服务器会超时重传，客服端能在2MSL事件内收到这个重传的报文段，若立即释放，则无法收到服务端重传的报文段，不会再发送确认报文段，则服务端无法正常进入CLOSED状态。</p><h3 id="23-除了四次挥手还能怎么断开连接：⭐⭐"><a href="#23-除了四次挥手还能怎么断开连接：⭐⭐" class="headerlink" title="23. 除了四次挥手还能怎么断开连接：⭐⭐"></a>23. 除了四次挥手还能怎么断开连接：⭐⭐</h3><p>发送reset报文：</p><ul><li>如果主机需要尽快关闭连接（或连接超时，或端口、主机不可达）时，发送RST包（RST表示复位）强制关闭TCP连接。发送RST包关闭连接时，可以丢弃缓存区的包直接发送RST包，而接收端收到RST包后，也不必发送ACK包来确认。<br>Reset报文的利用：</li></ul><ol><li>安全设备利用reset报文阻断异常连接</li></ol><ul><li>  安全设备（如防火墙、入侵检测系统等）在发现某些可疑的TCP连接时，会构造交互双方的reset报文发给对端，让对端释放该TCP连接。比如入侵检测检测到黑客攻击的TCP连接，其构造成被攻击端给黑客主机发送reset报文，让黑客主机释放攻击连接。</li></ul><ol start="2"><li>利用reset报文实施攻击</li></ol><ul><li>  安全设备可以利用reset报文达到安全防护的效果，黑客和攻击者也可以利用reset报文实现对某些主机的入侵和攻击，最常见的就是TCP会话劫持攻击。关于TCP会话劫持的相关知识请参考第三章《TCP会话劫持》一文。</li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>　　非常感谢您到阅读到最后，如果您觉得对您有帮助的话，希望能够点个赞，有任何问题都可以联系我，希望能够一起进步。<br><br>　　最后祝您前程似锦，我们各自攀登，高处相见🌈！</p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础--JS是灵魂</title>
      <link href="/2021/06/15/qian-duan-ji-chu-js-shi-ling-hun/"/>
      <url>/2021/06/15/qian-duan-ji-chu-js-shi-ling-hun/</url>
      
        <content type="html"><![CDATA[<h3 id="1-JS的数据类型有哪些？⭐⭐⭐⭐⭐"><a href="#1-JS的数据类型有哪些？⭐⭐⭐⭐⭐" class="headerlink" title="1.JS的数据类型有哪些？⭐⭐⭐⭐⭐"></a>1.JS的数据类型有哪些？⭐⭐⭐⭐⭐</h3><p>值类型都是存在栈中，引用类型的值存在堆中，栈中存的变量和内存地址，内存地址指向堆中的值，<br>这样存储是因为性能问题<br><br><code>基本数据类型：</code></p><ul><li>Number</li><li>String</li><li>Boolean</li><li>Null</li><li>Undefined</li><li>Symbol（ES6新增数据类型）</li><li>bigInt<br><code>引用数据类型：</code></li><li>Object</li><li>Array</li><li>Date</li><li>Function(特殊, 但不用于存储数据，所以没有“拷贝，复制函数”这一说)</li><li>RegExp</li></ul><h3 id="2-在js里怎么判断数据类型？⭐⭐⭐⭐⭐"><a href="#2-在js里怎么判断数据类型？⭐⭐⭐⭐⭐" class="headerlink" title="2.在js里怎么判断数据类型？⭐⭐⭐⭐⭐"></a>2.在js里怎么判断数据类型？⭐⭐⭐⭐⭐</h3><p><code>typeof</code>：<br><br>1.能判断所有值类型(string, number, boolean, undefined, Symbol)<br><br>2.能判断函数<br><br>3.能识别引用类型(不能再继续识别)</p><p><code>instanceof</code>：<br><br>1.判断对象对否处于目标对象的原型链上<br><br>2.一般用来区分引用类型，不能判断字面量的基本数据类型<br></p><p><code>Object.prototype.toString.call()</code><br><br>可以区分具体的基本类型和引用类型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"kerwin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "[object String]" </span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "[object Array]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-手写instanceof⭐⭐⭐"><a href="#3-手写instanceof⭐⭐⭐" class="headerlink" title="3.手写instanceof⭐⭐⭐"></a>3.手写instanceof⭐⭐⭐</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//遍历A的原型链，如果找到B.prototype，返回true，否则返回false</span><span class="token keyword">const</span> <span class="token function-variable function">_instanceof</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token constant">A</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">===</span> <span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    p <span class="token operator">=</span> p<span class="token punctuation">.</span>__proto__  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-var和let-const的区别⭐⭐⭐⭐⭐"><a href="#4-var和let-const的区别⭐⭐⭐⭐⭐" class="headerlink" title="4.var和let const的区别⭐⭐⭐⭐⭐"></a>4.var和let const的区别⭐⭐⭐⭐⭐</h3><ul><li>var是ES5语法，let const是ES6语法，var有变量提升，但其实let和const也会提升，但是会有暂时性死区，在定义前不可用</li><li>var和let是变量，可修改，const是常量，不可修改，但是如果使用const声明的是对象的话，是可以修改对象里面的值的</li><li>let const有块级作用域，var没有</li></ul><h3 id="5-关于数组的遍历方案，有哪些区别？⭐⭐⭐⭐"><a href="#5-关于数组的遍历方案，有哪些区别？⭐⭐⭐⭐" class="headerlink" title="5.关于数组的遍历方案，有哪些区别？⭐⭐⭐⭐"></a>5.关于数组的遍历方案，有哪些区别？⭐⭐⭐⭐</h3><p><code>for：</code><br><br>最基础常见的一种循环，不用多说<br></p><ol><li>continue 语句用来跳出本次循环，但会继续执行后面的循环。</li><li>break 语句用来结束循环，后面的循环不会再执行。</li><li>return 并不能用来跳出for循环，return语句只能出现在函数体内，它会终止函数的执行，并返回一个指定的值。</li></ol><p><code>forEach：</code><br><br>　　对数组的每个元素执行一次提供的函数，其中函数有三个参数，依次为：当前循环项的内容、当前循环的索引、循环的数组</p><p><code>map()：</code><br><br>　　方法会依次循环每一项，并且返回结果映射组成一个新的数组<br><br>　　使用forEach、map不能中断循环，方法会将每项内容都执行完成才会结束循环。</p><p><code>for in：</code><br><br>遍历的是key（可遍历对象、数组或字符串的key），最好用来遍历对象<br><br>使用for-in可以遍历数组，但是会存在以下问题：</p><ol><li>index索引为字符串型数字（注意，非数字），不能直接进行几何运算。</li><li>遍历顺序有可能不是按照实际数组的内部顺序（可能按照随机顺序）。</li><li>使用for-in会遍历数组所有的可枚举属性，包括原型。通常需要配合hasOwnProperty()方法判断某个属性是否该对象的实例属性，来将原型对象从循环中剔除。<br><code>for-of：</code><br>遍历的是value（可遍历对象、数组或字符串的value）<br></li><li>这是最简洁、最直接的遍历数组元素的语法，这个方法避开了for-in循环的所有缺陷。</li><li>与forEach()不同的是，它可以正确响应break、continue和return语句。</li><li>因此建议是使用for-of遍历数组，因为for-of遍历的只是数组内的元素，而不包括数组的原型属性method和索引name。</li></ol><h3 id="6-什么是原型链？⭐⭐⭐⭐⭐"><a href="#6-什么是原型链？⭐⭐⭐⭐⭐" class="headerlink" title="6.什么是原型链？⭐⭐⭐⭐⭐"></a>6.什么是原型链？⭐⭐⭐⭐⭐</h3><p><code>原型关系：</code></p><ol><li>每个构造函数都有显示原型prototype</li><li>每个实例都有隐式原型_proto_</li><li>实例的_proto_指向对应构造函数的prototype</li><li>获取属性和方法时，先从自身属性和方法寻找，如果找不到则自动去_proto_中寻找</li></ol><p><code>原型链：</code><br><br>　　当访问一个对象的某个属性时，会现在这个对象本身属性上查找，如果没有找到，则会去他的__proro__隐式原型上查找，即他的构造函数的prototype，如果还没有找到就会再在构造函数的prototype的__proto__中查找，一直往上层查找，直到到null还没有找到，则返回undefined<br>Object.prototype.—proto—===null这，这样一层一层向上查找就会形成一个链式结构，我们称为原型链</p><h3 id="7-什么是自由变量⭐⭐⭐⭐"><a href="#7-什么是自由变量⭐⭐⭐⭐" class="headerlink" title="7.什么是自由变量⭐⭐⭐⭐"></a>7.什么是自由变量⭐⭐⭐⭐</h3><p><code>自由变量：</code><br><br>　　一个变量在当前作用域没有定义，但被使用了。会向上级作用域一层一层依次寻找，直到找到为止，如果到全局作用域都没找到，则报错<br><br>　　所有自由变量的查找，是在函数定义的地方，向上级作用域查找，不是在执行的地方</p><h3 id="8-什么是作用域，作用域链⭐⭐⭐⭐⭐"><a href="#8-什么是作用域，作用域链⭐⭐⭐⭐⭐" class="headerlink" title="8. 什么是作用域，作用域链⭐⭐⭐⭐⭐"></a>8. 什么是作用域，作用域链⭐⭐⭐⭐⭐</h3><p><code>作用域：</code></p><ul><li>作用域决定了代码区块中变量和其他资源的可见性，作用域就是一个独立的地盘，让变量不会外泄、暴露出去</li><li>也就是说作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。</li><li>ES6 之前 JavaScript 没有块级作用域，只有全局作用域和函数作用域。ES6的到来，为我们提供了  块级作用域<br><code>作用域链：</code></li><li>当所需要的变量在所在的作用域中查找不到的时候，它会一层一层向上查找，</li><li>直到找到全局作用域还没有找到的时候，就会放弃查找。这种一层一层的关系，就是作用域链<br>作用域和执行上下文：<br><br>JavaScript的执行分为：解释和执行两个阶段<br><br><code>解释阶段：</code><ul><li>词法分析</li><li>语法分析</li><li>作用域规则确定<br><code>执行阶段：</code></li><li>创建执行上下文</li><li>执行函数代码</li><li>垃圾回收</li></ul></li></ul><ol><li>JavaScript解释阶段便会确定作用域规则，因此作用域在函数定义时就已经确定了，而不是在函数调用时确定，但是执行上下文是函数执行之前创建的。</li><li>执行上下文最明显的就是this的指向是执行时确定的,而作用域访问的变量是编写代码的结构确定的。<br>作用域和执行上下文之间最大的<code>区别</code>是：</li></ol><ul><li>执行上下文在运行时确定，随时可能改变；作用域在定义时就确定，并且不会改变。</li><li>同一个作用域下，不同的调用会产生不同的执行上下文环境，所以this指向就不同</li></ul><h3 id="9-说一说this⭐⭐⭐⭐⭐"><a href="#9-说一说this⭐⭐⭐⭐⭐" class="headerlink" title="9. 说一说this⭐⭐⭐⭐⭐"></a>9. 说一说this⭐⭐⭐⭐⭐</h3><ol><li>this取值，是在函数执行的时候确定的，不是在定义的时候确定的，this默认情况下指向window，严格模式下为undefined</li><li>隐式绑定：<br><br>即this指向距离其最近的调用者，所谓的最近的调用者就函数前面最近的一个对象。<br><br>显示绑定：<br><ul><li>call, apply, bind 中的this会指向传入的第一个参数<br></li><li>如果这些函数调用时没有传入参数，则指向默认对象(window或undefined)</li></ul></li><li>构造函数中的this指向该函数创建的实例对象</li><li>箭头函数本身并不存在this，其this是由其父级作用域继承而来，箭头函数中的this无法通过bind、call、apply进行修改。</li><li>立即执行函数中的this就一句话：永远指向全局window</li></ol><h3 id="10-谈一谈闭包⭐⭐⭐⭐⭐"><a href="#10-谈一谈闭包⭐⭐⭐⭐⭐" class="headerlink" title="10. 谈一谈闭包⭐⭐⭐⭐⭐"></a>10. 谈一谈闭包⭐⭐⭐⭐⭐</h3><p>闭包：<br><br>含义：闭包就是能够读取其他函数内部变量的函数<br><br>理解：</p><ul><li>无论通过哪种方式将内部的函数传递到所在的词法作用域以外，它都会持有对原始作用域的引用，无论在何处执行这个函数都会使用闭包。<br></li><li>让这些变量的值始终保存在内存中，这是因为闭包的执行依赖外部函数中的变量，只有闭包执行完，才会释放变量所占的内存<br>应用：</li></ul><ol><li>闭包的应用比较典型是定义模块，我们将操作函数暴露给外部，而细节隐藏在模块内部</li><li>防抖节流</li></ol><h3 id="11-手写apply⭐⭐⭐"><a href="#11-手写apply⭐⭐⭐" class="headerlink" title="11. 手写apply⭐⭐⭐"></a>11. 手写apply⭐⭐⭐</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> ctx <span class="token operator">=</span> context <span class="token operator">||</span> window  <span class="token comment">//最重要的一步，1.myApply内部的this是指向调用者fn函数的。</span>  <span class="token comment">//2.ctx.func就是fn函数，ctx调用了fn函数，因此fn函数内部的this指向ctx</span>  ctx<span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> ctx<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> ctx<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">delete</span> ctx<span class="token punctuation">.</span>func  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-手写bind⭐⭐⭐"><a href="#12-手写bind⭐⭐⭐" class="headerlink" title="12. 手写bind⭐⭐⭐"></a>12. 手写bind⭐⭐⭐</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bind1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//将参数拆解为数组</span>  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取this(数组第一项)</span>  <span class="token keyword">const</span> t <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//fn1.bind(...)中的fn1</span>  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token comment">//返回一个函数</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">self</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> args<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-手写flatern，考虑多层级⭐⭐⭐"><a href="#13-手写flatern，考虑多层级⭐⭐⭐" class="headerlink" title="13.手写flatern，考虑多层级⭐⭐⭐"></a>13.手写flatern，考虑多层级⭐⭐⭐</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> isDeep <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isDeep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arr  <span class="token comment">//已经是flatern</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>   <span class="token comment">//arr里的每个元素都会通过concat连接</span>  <span class="token keyword">return</span> <span class="token function">flat</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-手写new⭐⭐⭐"><a href="#14-手写new⭐⭐⭐" class="headerlink" title="14. 手写new⭐⭐⭐"></a>14. 手写new⭐⭐⭐</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 创建一个空对象</span>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 使空对象的隐式原型指向原函数的显式原型</span>  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> fn<span class="token punctuation">.</span>prototype  <span class="token comment">// this指向obj</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span>  <span class="token comment">// 返回</span>  <span class="token keyword">return</span> result <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="15-手写trim⭐⭐⭐"><a href="#15-手写trim⭐⭐⭐" class="headerlink" title="15. 手写trim⭐⭐⭐"></a>15. 手写trim⭐⭐⭐</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">trim</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\s+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\s+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="16-手写柯里化⭐⭐"><a href="#16-手写柯里化⭐⭐" class="headerlink" title="16. 手写柯里化⭐⭐"></a>16. 手写柯里化⭐⭐</h3><p>实现例如add(1)(2)(3)(4)=10　　add(1)(1,2,3)(2)=9<br><br>指的是将一个接受多个参数的函数，变为接受一个参数返回一个函数的固定形式</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>  <span class="token keyword">let</span> <span class="token function-variable function">adder</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token keyword">return</span> adder  <span class="token punctuation">&#125;</span>  adder<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> a <span class="token operator">+</span> b    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> adder<span class="token punctuation">&#125;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token comment">/*ƒ () &#123;      args.push(...arguments)      return adder    &#125;ƒ () &#123;      args.push(...arguments)      return adder    &#125;truetrue*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-手写深度比较⭐⭐⭐⭐"><a href="#17-手写深度比较⭐⭐⭐⭐" class="headerlink" title="17. 手写深度比较⭐⭐⭐⭐"></a>17. 手写深度比较⭐⭐⭐⭐</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//判断是否是对象或数组</span><span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!==</span> <span class="token string">'null'</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token parameter">obj1<span class="token punctuation">,</span> obj2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//值类型(注意，参与equal的一般不会是函数)</span>    <span class="token keyword">return</span> obj1 <span class="token operator">===</span> obj2  <span class="token punctuation">&#125;</span>  <span class="token comment">//两个都是对象或数组，而且不相等</span>  <span class="token comment">//1.先取出obj1和obj2的keys，比较个数</span>  <span class="token keyword">const</span> obj1Keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>  <span class="token keyword">const</span> obj2Keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj1Keys<span class="token punctuation">.</span>length <span class="token operator">!==</span> obj2Keys<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//2.以obj1为基准，和obj2一次递归比较</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEqual</span><span class="token punctuation">(</span>obj1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> obj2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="18-手写深拷贝⭐⭐⭐⭐"><a href="#18-手写深拷贝⭐⭐⭐⭐" class="headerlink" title="18. 手写深拷贝⭐⭐⭐⭐"></a>18. 手写深拷贝⭐⭐⭐⭐</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//obj是null，或者不是对象或数组，直接返回</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//初始化返回结果</span>  <span class="token keyword">let</span> result<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//递归调用</span>      result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="19-介绍一下什么是DOM？⭐⭐⭐"><a href="#19-介绍一下什么是DOM？⭐⭐⭐" class="headerlink" title="19. 介绍一下什么是DOM？⭐⭐⭐"></a>19. 介绍一下什么是DOM？⭐⭐⭐</h3><p><code>DOM：</code></p><ul><li>即文档对象模型，DOM定义了访问HTML和XML文档的标准。</li><li>DOM把整个页面映射为一个多层的节点结构，html或xml页面中的每个组成部分都是某种类型的节点，这些节点又包含着不同类型的数据。</li><li>它允许程序和脚本动态地访问和更新文档的内容、结构和样式。</li><li>DOM节点有元素节点，文本节点，属性节点等12种，有很多方法获取节点和操作节点</li></ul><h3 id="20-介绍一下ajax并手写⭐⭐⭐⭐⭐"><a href="#20-介绍一下ajax并手写⭐⭐⭐⭐⭐" class="headerlink" title="20. 介绍一下ajax并手写⭐⭐⭐⭐⭐"></a>20. 介绍一下ajax并手写⭐⭐⭐⭐⭐</h3><p><code>ajax原理：</code></p><ul><li>通过浏览器的javascript对象XMLHttpRequest(Ajax引擎)对象向服务器发送异步请求并接收服务器的响应数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。</li><li>用户的请求间接通过Ajax引擎发出而不是通过浏览器直接发出，同时Ajax引擎也接收服务器返回响应的数据，所以不会导致浏览器上的页面全部刷新。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 手写一般写promise封装的就可以了</span><span class="token keyword">function</span> <span class="token function">ajaxPromiseGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'test.json'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'404 not found'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> p<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>xhr.readyState:</li><li>0-(未初始化)还没有调用send()方法</li><li>1-(载入)已调用send()方法，正在发送请求</li><li>2-(载入完成)send()方法执行完成，已经接收到全部相应内容</li><li>3-(交互)正在解析响应内容</li><li>4-(完成)相应内容解析完成，可以在客户端调用</li></ul><p>xhr.status:</p><ul><li>2xx-表示成功处理请求，如200</li><li>3xx-需要重定向。浏览器直接跳转，如301 302 304</li><li>4xx-客户端请求错误，如404 403</li><li>5xx-服务端错误</li></ul><h3 id="21-介绍一下什么是JSON？⭐⭐⭐"><a href="#21-介绍一下什么是JSON？⭐⭐⭐" class="headerlink" title="21. 介绍一下什么是JSON？⭐⭐⭐"></a>21. 介绍一下什么是JSON？⭐⭐⭐</h3><ul><li>json是一种数据格式，本质是一段字符串</li><li>json格式和JS对象结构一致，对JS语言更友好</li><li>window.JSON是一个全局对象：JSON.stringify，JSON.parse</li><li>不能有单引号，都需要双引号</li></ul><h3 id="22-介绍一下JS的垃圾回收机制⭐⭐⭐⭐"><a href="#22-介绍一下JS的垃圾回收机制⭐⭐⭐⭐" class="headerlink" title="22.介绍一下JS的垃圾回收机制⭐⭐⭐⭐"></a>22.介绍一下JS的垃圾回收机制⭐⭐⭐⭐</h3><p><code>垃圾回收机制回收的对象：</code></p><ul><li>JavaScript 中的原始类型的值存放在栈内存中，由系统自动分配释放。</li><li>引用类型的值存放于堆内存中，其生命周期由JavaScript引擎的垃圾回收机制决定。<br>垃圾回收机制分为：引用计数和标记清除<br><br><code>引用计数：</code></li></ul><ol><li>基本思路就是对每个值都记录其被引用的次数。当一个值的引用数为0的时候，说明没有任何变量引用它，就可以安全的回收其内存了。</li><li>垃圾回收器会在下次进行垃圾回收的时候，释放引用次数为0的值的内存。<br>引用记数的问题：</li></ol><ul><li>循环引用。即对象A有一个属性指向B,B也有一个属性指向A。</li><li>这样A、B对象的引用计数都为2，就永远不会被垃圾回收器回收。久而久之，会造成大量的内存无法被回收，造成内存泄漏。由于存在比较明显的问题，所以主要存在于早期的IE浏览器<br><code>标记清除：</code><br><br>可达性：<br><br>可达值是那些以某种方式可访问或可用的值，他们不会被垃圾回收机制清除、释放，可达性是判断一个值是否会被垃圾回收的重要依据。<br><br>下面是一些固有可达值的集合，所占用的空间不能被释放。</li><li>当前函数的局部变量和参数</li><li>嵌套调用时调用链上所有函数的变量与参数</li><li>全局变量以及还有一些内部的<br>这些值称为根，如果一个值可以从根通过引用或引用链被访问，就被认为是可达的。<br><br>标记清除的过程<br>垃圾收集器会定期执行以下步骤，进行垃圾回收。</li></ul><ol><li>垃圾收集器找到所有根并标记他们</li><li>遍历并标记根的引用</li><li>然后标记引用的引用，直至标记所有可达的对象</li><li>剩余没有被标记的对象都会被删除<br>现今主流浏览器都采用标记清除，来管理引用值的内存</li></ol><h3 id="23-介绍一下什么是跨域⭐⭐⭐⭐⭐"><a href="#23-介绍一下什么是跨域⭐⭐⭐⭐⭐" class="headerlink" title="23.介绍一下什么是跨域⭐⭐⭐⭐⭐"></a>23.介绍一下什么是跨域⭐⭐⭐⭐⭐</h3><p>重点：<br><br>　　跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。<br><br>为什么拦截？<br></p><ul><li>同源策略：ajax请求时，浏览器要求当前网页和server必须同源，浏览器安全的基石是同源策略</li><li>同源：协议，域名，端口，三者必须一致</li><li>目的：为了保证用户信息的安全，防止恶意的网站窃取数据。<br>例外：<br></li></ul><ol><li>加载图片，css，js可无视同源策略</li><li><code>&lt;img/&gt;</code>可用于统计打点，可使用第三方统计服务</li><li><code>&lt;link/&gt;``&lt;script&gt;</code>可使用CDN,CDN一般都是外域</li></ol><h3 id="24-介绍一下jsonp跨域？⭐⭐⭐⭐⭐"><a href="#24-介绍一下jsonp跨域？⭐⭐⭐⭐⭐" class="headerlink" title="24. 介绍一下jsonp跨域？⭐⭐⭐⭐⭐"></a>24. 介绍一下jsonp跨域？⭐⭐⭐⭐⭐</h3><p><code>jsonp原理：</code><br><br>　　script标签src属性中的链接可以访问跨域的js脚本，利用这个特性，用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据返回，服务端不再返回JSON格式的数据，而是返回一段调用某个函数的js代码，在src中进行了调用，这样实现了跨域<br><br>jsonp优缺点<br></p><ul><li>JSONP优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。</li><li>缺点是仅支持get方法具有局限性,不安全可能会遭受XSS攻击。</li></ul><h3 id="25-介绍一下CORS跨域？⭐⭐⭐⭐"><a href="#25-介绍一下CORS跨域？⭐⭐⭐⭐" class="headerlink" title="25. 介绍一下CORS跨域？⭐⭐⭐⭐"></a>25. 介绍一下CORS跨域？⭐⭐⭐⭐</h3><p><code>CORS跨域：</code><br><br>　　CORS是跨源AJAX请求的根本解决方法。JSONP只能发GET请求，但是CORS允许任何类型的请求。<br>浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多一次附加的请求，但用户不会有感觉。因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。<br><br>浏览器将CORS请求分成两类：简单请求和非简单请求</p><p><code>简单请求：</code><br><br>需要同时满足下面两大条件：<br><br>（1) 请求方法是以下三种方法之一：</p><ul><li>HEAD</li><li>GET</li><li>POST<br>（2）HTTP的头信息 Request Headers 不超出以下几种字段：</li><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</li></ul><ol><li>对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段</li><li>origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求</li><li>如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段</li><li>最重要的是Access-Control-Allow-Origin 该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。</li><li>还有一些字段控制是否发送cookie等</li></ol><p><code>非简单请求：</code><br></p><ol><li>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。</li><li>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为预检请求</li><li>“预检”请求用的请求方法是OPTIONS，表示这个请求是用来询问的。头信息里面，关键字段是Origin，表示请求来自哪个源。</li><li>除了Origin字段，”预检”请求的头信息包括两个特殊字段。</li></ol><ul><li>Access-Control-Request-Method<br>该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。</li><li>Access-Control-Request-Headers<br>该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header。<br></li><li>服务器收到”预检”请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后确认允许跨源请求，就可以做出回应，回应的关键同样是Access-Control-Allow-Origin字段</li></ul><p><code>PS：</code></p><ul><li>可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），</li><li>浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。</li><li>服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 HTTP 认证相关数据）。</li></ul><h3 id="26-介绍一下Nginx？⭐⭐⭐⭐"><a href="#26-介绍一下Nginx？⭐⭐⭐⭐" class="headerlink" title="26.介绍一下Nginx？⭐⭐⭐⭐"></a>26.介绍一下Nginx？⭐⭐⭐⭐</h3><ol><li>正向代理：一般用于个人访问某服务内部，比如你要访问Google，但是通常情况下，你无法访问，这时聪明的我们会花钱或者免费找一个代理服务器，让它去访问Google，然后再通过它返回数据给你，此时对于Google来说，他不知道具体实际访问它的client是谁，此过程为正向代理。</li><li>反向代理：一般用于公司提供对外服务，比如一般的公司，为了保证内网的安全，阻止web攻击，实现负载均衡减少请求压力，会在web节点之前搭建一个代理服务器，比如nginx，此时，用户访问的是nginx代理服务器，而对于用户来说，他不知道具体为他提供服务的是哪个真实的server节点，此过程为反向代理。<br><code>举个栗子：</code><br><br>当前前端域名为：<code>http://127.0.0.1</code><br><br>后端server域名为：<code>https://github.com</code><br><br>我想直接获取<code>https://github.com</code>的内容肯定是不行的，会出现跨域<br><br>现在就需要需要启动一个nginx服务器，在配置文件<code>nginx.conf</code>中做出如下配置<br><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>  <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">proxy_pass</span>  <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">3000</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">location</span> <span class="token operator">~</span> <span class="token operator">/</span>api<span class="token operator">/</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">proxy_pass</span>  <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>上面的配置的可以理解为：</li></ol><blockquote><p>监听80端口（Nginx默认启动了80端口），将<code>http://127.0.0.1</code>的所有请求服务转发到<code>127.0.0.1</code>端口为<code>3000</code>；<br>将<code>http://127.0.0.1/api/</code>或者<code>http://127.0.0.1/api/xxxxx</code>请求转发到<code>http://github.com</code><br>服务器和服务器中是不存在跨域的，nginx正是利用了这一点，将前端访问同源服务器，而同源服务器将请求转发到不同域的服务器从而获取数据</p></blockquote><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>　　非常感谢您到阅读到最后，如果您觉得对您有帮助的话，希望能够点个赞，有任何问题都可以联系我，希望能够一起进步。<br><br>　　最后祝您前程似锦，我们各自攀登，高处相见🌈！</p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础--必备手写</title>
      <link href="/2021/06/05/qian-duan-ji-chu-shou-xie/"/>
      <url>/2021/06/05/qian-duan-ji-chu-shou-xie/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在前端的学习中，不仅要学会用，一些基础功能的手写也非常重要</p><p>食用对象：初级前端<br>美味指数：😋😋😋😋😋</p><h3 id="1-实现可拖拽DIV"><a href="#1-实现可拖拽DIV" class="headerlink" title="1. 实现可拖拽DIV"></a>1. 实现可拖拽DIV</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>        #box <span class="token punctuation">&#123;</span>            width<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            background<span class="token operator">:</span> #<span class="token number">07</span>d268<span class="token punctuation">;</span>            position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>            left<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            top<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> drag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> position <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousedown'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    drag <span class="token operator">=</span> <span class="token boolean">true</span>    position <span class="token operator">=</span> <span class="token punctuation">[</span>e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> e<span class="token punctuation">.</span>clientY<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>drag <span class="token operator">!==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">;</span>    <span class="token keyword">const</span> y <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>    <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">.</span>left <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//js获取head里css需要用getComputedStyle</span>    <span class="token keyword">const</span> top <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">.</span>top <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> left <span class="token operator">+</span> x <span class="token operator">-</span> position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'px'</span>    box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> top <span class="token operator">+</span> y <span class="token operator">-</span> position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'px'</span>    position <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseup'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    drag <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-双飞翼布局"><a href="#2-双飞翼布局" class="headerlink" title="2. 双飞翼布局"></a>2. 双飞翼布局</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">body</span> <span class="token punctuation">&#123;</span>        <span class="token property">min-width</span><span class="token punctuation">:</span> 550px    <span class="token punctuation">&#125;</span>    <span class="token selector">.column</span> <span class="token punctuation">&#123;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#center</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #cccccc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#main</span> <span class="token punctuation">&#123;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0 190px 0 190px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#left</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #ffff00<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 190px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#right</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 190px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> -190px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        this is center    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this is left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this is right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-圣杯布局"><a href="#3-圣杯布局" class="headerlink" title="3. 圣杯布局"></a>3. 圣杯布局</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">body</span> <span class="token punctuation">&#123;</span>        <span class="token property">min-width</span><span class="token punctuation">:</span> 550px    <span class="token punctuation">&#125;</span>    <span class="token selector">#header</span> <span class="token punctuation">&#123;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#container</span> <span class="token punctuation">&#123;</span>        <span class="token property">padding-left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">padding-right</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#container .column</span> <span class="token punctuation">&#123;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left    <span class="token punctuation">&#125;</span>    <span class="token selector">#center</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%    <span class="token punctuation">&#125;</span>    <span class="token selector">#left</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> 200px    <span class="token punctuation">&#125;</span>    <span class="token selector">#right</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> -150px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#footer</span> <span class="token punctuation">&#123;</span>        <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #f1f1f1    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this is center<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this is left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this is right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-两栏布局"><a href="#4-两栏布局" class="headerlink" title="4. 两栏布局"></a>4. 两栏布局</h3><ul><li>绝对定位方式<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.wrap</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box1</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #d43131<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box2</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #07d268<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>浮动方式<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.box1</span> <span class="token punctuation">&#123;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #d43131<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box2</span> <span class="token punctuation">&#123;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #07d268<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>flex方式<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.wrap</span> <span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box1</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #d43131<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box2</span> <span class="token punctuation">&#123;</span>        <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #07d268<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="5-画三角形或梯形⭐⭐⭐⭐"><a href="#5-画三角形或梯形⭐⭐⭐⭐" class="headerlink" title="5. 画三角形或梯形⭐⭐⭐⭐"></a>5. 画三角形或梯形⭐⭐⭐⭐</h3><ul><li>CSS方法：<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.box</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">border-right</span><span class="token punctuation">:</span> 100px solid transparent<span class="token punctuation">;</span>        <span class="token property">border-left</span><span class="token punctuation">:</span> 100px solid transparent<span class="token punctuation">;</span>        <span class="token property">border-top</span><span class="token punctuation">:</span> 100px solid #d43131<span class="token punctuation">;</span>        <span class="token property">border-bottom</span><span class="token punctuation">:</span> 100px solid transparent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38b2f1f2a3b842fab57fbd3f13357393~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br><br>如果需要画梯形就改变width的值即可</p><ul><li>Canvas方法：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>style<span class="token operator">></span>    #box2 <span class="token punctuation">&#123;</span>        width<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        height<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>    <span class="token operator">&lt;</span>canvas id<span class="token operator">=</span><span class="token string">"box2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>canvas<span class="token operator">></span>    <span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#box2'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     ctx<span class="token punctuation">.</span>fillStyle<span class="token operator">=</span><span class="token string">"#8989e7"</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23a95003816d4e138896e8cb2bce396c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="6-reduce模拟map"><a href="#6-reduce模拟map" class="headerlink" title="6. reduce模拟map"></a>6. reduce模拟map</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_map</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> callbackThis</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 最终返回的新数组</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 定义回调函数的执行环境</span>  <span class="token comment">// call第一个参数传入null，则 this指向全局对象，同 map的规则</span>  <span class="token keyword">let</span> CBThis <span class="token operator">=</span> callbackThis <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">brfore<span class="token punctuation">,</span> after<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 传入map回调函数拥有的参数</span>    <span class="token comment">// 把每一项的执行结果push进res中</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>CBThis<span class="token punctuation">,</span> after<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-手写flatter考虑多层级"><a href="#7-手写flatter考虑多层级" class="headerlink" title="7. 手写flatter考虑多层级"></a>7. 手写flatter考虑多层级</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> isDeep <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isDeep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arr  <span class="token comment">//已经是flatern</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>   <span class="token comment">//arr里的每个元素都会通过concat连接</span>  <span class="token keyword">return</span> <span class="token function">flat</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-手写new"><a href="#8-手写new" class="headerlink" title="8. 手写new"></a>8. 手写new</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 手写一个new</span><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 创建一个空对象</span>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 使空对象的隐式原型指向原函数的显式原型</span>  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> fn<span class="token punctuation">.</span>prototype  <span class="token comment">// this指向obj</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span>  <span class="token comment">// 返回</span>  <span class="token keyword">return</span> result <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-手写trim"><a href="#9-手写trim" class="headerlink" title="9. 手写trim"></a>9. 手写trim</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">trim</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\s+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\s+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="10-手写柯里化"><a href="#10-手写柯里化" class="headerlink" title="10. 手写柯里化"></a>10. 手写柯里化</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//经典面试题：实现add(1)(2)(3)(4)=10;add(1)(1,2,3)(2)=9</span><span class="token comment">//指的是将一个接受多个参数的函数，变为接受一个参数返回一个函数的固定形式</span><span class="token comment">//这样便于再次调用，例如f(1)(2)</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>  <span class="token keyword">let</span> <span class="token function-variable function">adder</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token keyword">return</span> adder  <span class="token punctuation">&#125;</span>  adder<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> a <span class="token operator">+</span> b    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> adder<span class="token punctuation">&#125;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-手写深度比较"><a href="#11-手写深度比较" class="headerlink" title="11. 手写深度比较"></a>11. 手写深度比较</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//判断是否是对象或数组</span><span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!==</span> <span class="token string">'null'</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token parameter">obj1<span class="token punctuation">,</span> obj2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//值类型(注意，参与equal的一般不会是函数)</span>    <span class="token keyword">return</span> obj1 <span class="token operator">===</span> obj2  <span class="token punctuation">&#125;</span>  <span class="token comment">//两个都是对象或数组，而且不相等</span>  <span class="token comment">//1.先取出obj1和obj2的keys，比较个数</span>  <span class="token keyword">const</span> obj1Keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>  <span class="token keyword">const</span> obj2Keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj1Keys<span class="token punctuation">.</span>length <span class="token operator">!==</span> obj2Keys<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//2.以obj1为基准，和obj2一次递归比较</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEqual</span><span class="token punctuation">(</span>obj1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> obj2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-手写深拷贝"><a href="#12-手写深拷贝" class="headerlink" title="12. 手写深拷贝"></a>12. 手写深拷贝</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//obj是null，或者不是对象或数组，直接返回</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//初始化返回结果</span>  <span class="token keyword">let</span> result<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//递归调用</span>      result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-手写apply"><a href="#13-手写apply" class="headerlink" title="13. 手写apply"></a>13. 手写apply</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> ctx <span class="token operator">=</span> context <span class="token operator">||</span> window  <span class="token comment">//最重要的一步，1.myApply内部的this是指向调用者fn函数的。2.ctx.func就是fn函数，ctx调用了fn函数，因此fn函数内部的this指向ctx</span>  ctx<span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> ctx<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> ctx<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">delete</span> ctx<span class="token punctuation">.</span>func  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span>obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>c<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//&#123;c:2&#125; 1 2</span>a<span class="token punctuation">.</span><span class="token function">myApply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//&#123;c:2,func:[function a]&#125; 1 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-手写bind"><a href="#14-手写bind" class="headerlink" title="14. 手写bind"></a>14. 手写bind</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//模拟bind</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bind1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//将参数拆解为数组</span>  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取this(数组第一项)</span>  <span class="token keyword">const</span> t <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//fn1.bind(...)中的fn1</span>  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token comment">//返回一个函数</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">self</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> args<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="15-手写发布订阅模式"><a href="#15-手写发布订阅模式" class="headerlink" title="15. 手写发布订阅模式"></a>15. 手写发布订阅模式</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 发布订阅模式</span><span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 事件对象，存放订阅的名字和事件</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>events <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 订阅事件的方法</span>  <span class="token function">on</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 注意时数据，一个名字可以订阅多个事件函数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 存在则push到指定数组的尾部保存</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 触发事件的方法</span>  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">eventName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 遍历执行所有订阅的事件</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=></span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 移除订阅事件</span>  <span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=></span> cb <span class="token operator">!==</span> callback<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 只执行一次订阅的事件，然后移除</span>  <span class="token function">once</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 绑定的时fn, 执行的时候会触发fn函数</span>    <span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fn函数中调用原有的callback</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除fn, 再次执行的时候之后执行一次</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span>fn<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-手写promise"><a href="#16-手写promise" class="headerlink" title="16. 手写promise"></a>16. 手写promise</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">MyPromise2</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 规定状态</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">"pending"</span>    <span class="token comment">// 保存 `resolve(res)` 的res值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">undefined</span>    <span class="token comment">// 保存 `reject(err)` 的err值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">undefined</span>    <span class="token comment">// 成功存放的数组</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>successCB <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment">// 失败存放的数组</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>failCB <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">"pending"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">"fulfilled"</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value        <span class="token keyword">this</span><span class="token punctuation">.</span>successCB<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">f</span> <span class="token operator">=></span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">"pending"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">"rejected"</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason        <span class="token keyword">this</span><span class="token punctuation">.</span>failCB<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">f</span> <span class="token operator">=></span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 执行</span>      <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若出错，直接调用reject</span>      <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">"fulfilled"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">"rejected"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">"pending"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>successCB<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>failCB<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-手写promise-all"><a href="#17-手写promise-all" class="headerlink" title="17. 手写promise.all"></a>17. 手写promise.all</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">Promise<span class="token punctuation">.</span><span class="token function-variable function">all</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res        count <span class="token operator">++</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="18-大数相加"><a href="#18-大数相加" class="headerlink" title="18. 大数相加"></a>18. 大数相加</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> maxLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length<span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span>maxLength<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span>maxLength<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    t <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> f    f <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>t <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span>    sum <span class="token operator">=</span> t <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> sum    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>f <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    sum <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token operator">+</span> sum  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> sum<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="19-手写防抖函数"><a href="#19-手写防抖函数" class="headerlink" title="19. 手写防抖函数"></a>19. 手写防抖函数</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">500</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">//为了使函数的参数和this正确</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="20-手写节流函数"><a href="#20-手写节流函数" class="headerlink" title="20. 手写节流函数"></a>20. 手写节流函数</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">100</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-手写快排"><a href="#21-手写快排" class="headerlink" title="21. 手写快排"></a>21. 手写快排</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">quickSort</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">rec</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> arr <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> mid <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">rec</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> mid<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">rec</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">rec</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="22-手写二分搜索"><a href="#22-手写二分搜索" class="headerlink" title="22. 手写二分搜索"></a>22. 手写二分搜索</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">binarySearch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> high <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>mid<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">&lt;</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">></span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> mid    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="23-手写instanceof"><a href="#23-手写instanceof" class="headerlink" title="23. 手写instanceof"></a>23. 手写instanceof</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//遍历A的原型链，如果找到B.prototype，返回true，否则返回false</span><span class="token keyword">const</span> <span class="token function-variable function">_instanceof</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token constant">A</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">===</span> <span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    p <span class="token operator">=</span> p<span class="token punctuation">.</span>__proto__  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="感谢阅读"><a href="#感谢阅读" class="headerlink" title="感谢阅读"></a>感谢阅读</h2><p>非常感谢您到阅读到最后，如果有错误希望您能够指出，以免误导其他人，如果您觉得对您有帮助的话，希望能够点个赞，加个关注，有任何问题都可以联系我，希望能够一起进步。</p><p>最后祝您前程似锦，我们各自攀登，高处相见🌈！</p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础--ES5和ES6数组方法</title>
      <link href="/2021/05/28/qian-duan-ji-chu-es5-he-es6-shu-zu-fang-fa-xiang-jie/"/>
      <url>/2021/05/28/qian-duan-ji-chu-es5-he-es6-shu-zu-fang-fa-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>　　JS的数组方法不管是在工作中，或者是在做算法时都是非常重要的，也许一个API就能让你少写很多逻辑。<br><br>　　本文详细总结了ES5，ES6的数组方法，让你做到对他们的用法一网打尽。</p><p>食用对象：初级前端<br><br>美味指数：😋😋😋😋😋</p><h1 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h1><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><p>作用：删去数组最后一个值，返回值为删去的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [ 1, 2 ] 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h3><p>作用：删去数组第一个值，返回值为删去的值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [ 2, 3 ] 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>作用：在数组末尾加上一个值，返回值为数组的长度</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [ 1, 2, 3, 5 ] 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h3><p>作用：在数组开头加上一个值，返回值为数组的长度</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [ 5, 1, 2, 3 ] 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><p>作用：用于连接两个或多个数组，不改变原数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//[ 1, 2, 3, 11, 12, 13 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p>作用：用于翻转数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [ 3, 2, 1 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>作用：指定分隔符后，将数组转为字符串并返回，不改变原数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//[ 1, 2, 3 ] 1-2-3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><p>作用：截取数组，截取从下标为第一个参数开始到第二个参数（不包括，且为可选参数）的数组，不改变原数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//[ 2, 3 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p>作用：截取数组，第一个参数为开始下标，第二个参数为截取个数，第三个参数为添加的数，返回截取的数组，改变原数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>  res<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// [ 1, 'a', 5 ] [ 2, 3, 4 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p>作用：用于对数组的元素进行排序，并返回数组。默认排序顺序是根据字符串UniCode码，会改变原数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//升序</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment">//[ 1, 2, 3, 4, 5 ]</span><span class="token comment">//降序</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>   <span class="token comment">//[ 5, 4, 3, 2, 1 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><p>作用：将数组转化成字符串,不改变原数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'掘金'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//1,2,掘金 [ 1, 2, '掘金' ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><p>作用：查询数组是否含有指定元素，含有就返回下标，没有就返回-1</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>lastIndexOf</code>：搜索数组中的元素，并返回它最后出现的位置。</p><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p>作用：数组每个元素执行一次回调函数, 返回值为undefined</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//1, 2, 3</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//0, 1, 2</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//[ 1, 2, 3 ]</span>  <span class="token keyword">return</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> res<span class="token punctuation">)</span>   <span class="token comment">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>作用：遍历数组元素传给回调函数处理，返回处理后的新数组，不改变原数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//1, 2, 3</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//0, 1, 2</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[1, 2, 3]</span>  <span class="token keyword">return</span> value<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[2, 4, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="filter"><a href="#filter" class="headerlink" title="filter:"></a>filter:</h3><p>作用：遍历数组元素传给回调函数，返回所有结果为true的元素组成的数组，不改变原数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment">//[ 1, 2 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><p>作用：遍历数组元素传给回调函数，结果有一个为true则由some()返回true</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><p>作用：遍历数组元素传给回调函数，所有结果都为true则由every()返回true</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>作用：归并，从左往右迭代数组的所有项最终计算为一个值，并返回<br><br>第一个参数：上一次调用回调时的返回值，或者初始值 init<br><br>第二个参数：表示当前正在处理的数组元素<br><br>第三个参数：表示当前正在处理的数组元素的索引<br><br>末尾参数：表示初始值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//求数组各项之和：</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span>   <span class="token comment">//0,1,3,6,10</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>   <span class="token comment">//1,2,3,4,5</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>  <span class="token comment">//0,1,2,3,4</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>   <span class="token comment">//[ 1, 2, 3, 4, 5 ]</span>  <span class="token keyword">return</span> pre <span class="token operator">+</span> cur<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token comment">//15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>作用：所有数组成员依次执行回调函数，直到找出第一个返回值为true的成员并返回该成员，如果没有则返回undefined<br><br>第一个参数为当前元素，第二个为索引值，第三个为当前元素所属数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//0</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[ 1, -1, 3, 6 ]</span>  <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment">//1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex:"></a>findIndex:</h3><p>作用：所有数组成员依次执行回调函数，直到找出第一个返回值为true的成员并返回该成员在数组中的位置，如果没有则返回-1</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1, -1</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//0, 1</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[ 1, -1, 3, 6 ]</span>  <span class="token keyword">return</span> value <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin"></a>copyWithin</h3><p>作用：将指定位置指定数量的数组成员复制到其他位置，会改变原数组<br><br>第一个参数：从该位置开始替换数据<br><br>第二个参数：从该位置开始读取数据，默认为 0<br><br>第三个参数：到该位置前停止读取数据，默认等于数组长度</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment">//[ 1, 4, 3, 4, 5 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><p>作用：使用给定值，填充数组,会改变原数组<br><br>第一个参数：填充的数<br><br>第二个参数：从该位置开始填充，默认为 0<br><br>第三个参数：到该位置前停止填充，默认等于数组长度。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment">//[ 1, 2, 'a', 'a', 5 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><p>作用：返回一个布尔值，表示数组是否包含某个数<br><br>第一个参数：需要查找的值<br><br>第二个参数：搜索的起始位置</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h3><p>作用：拍平数组，默认拍平一层，可加拍平层数, 不改变原数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>   <span class="token comment">//[1, 2, 3, 4, 5, 6, 7, 8]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h3><p>作用：对原数组的每个成员执行一个函数，然后对返回值组成的数组执行flat()方法，返回一个新数组, 不改变原函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">[</span>item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment">//[ [ 2 ], [ 4 ], [ 6 ] ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="keys-values，entries"><a href="#keys-values，entries" class="headerlink" title="keys, values，entries"></a>keys, values，entries</h3><p>作用：用于遍历数组，返回一个遍历器对象，可以用for…of循环进行遍历<br><br>keys()是对键名的遍历<br>values()是对键值的遍历<br>entries()是对键值对的遍历</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">of</span> arr<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//0, 1, 2</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> arr<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//1, a, 3</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>index<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> arr<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0 1, 1 a, 2 3</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h1><h3 id="Array-isArray（ES5）"><a href="#Array-isArray（ES5）" class="headerlink" title="Array.isArray（ES5）"></a>Array.isArray（ES5）</h3><p>作用：判断一个对象是否数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'掘金'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Array-from（ES6）"><a href="#Array-from（ES6）" class="headerlink" title="Array.from（ES6）"></a>Array.from（ES6）</h3><p>作用：将类数组或者可遍历的对象转换成真正的数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Set(3) &#123; 1, 2, 3 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[ 1, 2, 3 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Array-of（ES6）"><a href="#Array-of（ES6）" class="headerlink" title="Array.of（ES6）"></a>Array.of（ES6）</h3><p>作用：用于将一组值转换成数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> res <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//[ 1, 'a', 2, 3 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="this问题"><a href="#this问题" class="headerlink" title="this问题"></a>this问题</h2><p>还可接收第二个参数作为当前this的方法有：<br><br>forEach，map，reduce，every，some，filter，find，findIndex<br><br>注意此时不要写成箭头函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//以forEach为例子：</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>age<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//1, 2, 3</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//0, 1, 2</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//[ 1, 2, 3 ]</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//3   注意这里this指向了obj</span>  <span class="token keyword">return</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>没有副作用，不改变原数组<br>join，concat，slice，toString，forEach，filter，map，reduce，flat</li><li>会改变原数组：<br>push，pop，shift，unshift，reverse，splice，sort，copyWithin，fill</li></ul><h2 id="感谢阅读"><a href="#感谢阅读" class="headerlink" title="感谢阅读"></a>感谢阅读</h2><p>　　非常感谢您到阅读到最后，如果有错误希望您能够指出，以免误导其他人，如果您觉得对您有帮助的话，希望能够点个赞，加个关注，有任何问题都可以联系我，希望能够一起进步。<br><br>　　最后祝您前程似锦，我们各自攀登，高处相见🌈！</p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础--JS中字符串与数字方法</title>
      <link href="/2021/05/16/qian-duan-ji-chu-js-zhong-zi-fu-chuan-yu-shu-zi-fang-fa/"/>
      <url>/2021/05/16/qian-duan-ji-chu-js-zhong-zi-fu-chuan-yu-shu-zi-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>JS字符串和数字的方法不管是在面试，还是在工作中，亦或者是在做算法都是非常重要的，也许一个API就能让你少写很多逻辑。<br>　　本文详细总结了字符串和数字的方法，让你做到对他们的用法一网打尽。</p><p>食用对象：初级前端<br>美味指数：😋😋😋😋😋</p><h2 id="String方法"><a href="#String方法" class="headerlink" title="String方法"></a>String方法</h2><h3 id="1-创建字符串"><a href="#1-创建字符串" class="headerlink" title="1. 创建字符串"></a>1. 创建字符串</h3><p>首先，创建字符串有两种方法<br><br>注意通过构造函数（如 new String(“string”)）创建出来的是封装了基本类型值（如 “string”）的封装对象<br><br>同时字符串的方法并不改变原字符串的值，而是返回一个新字符串</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> stringA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> stringB <span class="token operator">=</span> <span class="token string">'string'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> stringA<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> stringB<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-charAt"><a href="#2-charAt" class="headerlink" title="2. charAt"></a>2. charAt</h3><p>charAt：返回一个字符串中指定位置的字符</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'jueJin'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//e</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-concat"><a href="#3-concat" class="headerlink" title="3.concat"></a>3.concat</h3><p>concat：连接两个字符串，返回新的字符串</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zhangsan'</span><span class="token punctuation">;</span><span class="token keyword">let</span> str2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">' juejin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//zhangsan juejin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-indexOf"><a href="#4-indexOf" class="headerlink" title="4. indexOf"></a>4. indexOf</h3><p>indexOf:返回某个指定字符在字符串中首次出现的位置</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'juejin'</span><span class="token punctuation">;</span><span class="token keyword">let</span> n <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-lastIndexOf"><a href="#5-lastIndexOf" class="headerlink" title="5. lastIndexOf"></a>5. lastIndexOf</h3><p>lastIndexOf：从后往前搜索，其他与indexOf一样</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'juejin'</span><span class="token punctuation">;</span><span class="token keyword">let</span> n <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'j'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-includes"><a href="#6-includes" class="headerlink" title="6. includes"></a>6. includes</h3><p>includes：查询一个字符串中是否包括指定的字符子串</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zhangsan'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'san'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-match"><a href="#7-match" class="headerlink" title="7. match"></a>7. match</h3><p>match：一般用来找一个或多个正则表达式的匹配，返回值为一个数组，里面有所有匹配的值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zhangsan123 juejin456'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[ '1', '2', '3', '4', '5', '6' ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="8-repeat"><a href="#8-repeat" class="headerlink" title="8. repeat"></a>8. repeat</h3><p>repeat：复制字符串指定次数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'juejin'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//juejinjuejinjuejin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="9-replace"><a href="#9-replace" class="headerlink" title="9. replace"></a>9. replace</h3><p>replace：查找匹配的并替换，一般与正则表达式集合。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'juejin'</span><span class="token punctuation">;</span><span class="token keyword">let</span> str2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">jue</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">'zhangsan '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//zhangsan jin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="10-search"><a href="#10-search" class="headerlink" title="10. search"></a>10. search</h3><p>search：一般与正则表达式结合，查找某个值，查到了返回查到的索引值，未查到返回-1</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'juejin123'</span><span class="token punctuation">;</span><span class="token keyword">let</span> n <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  <span class="token comment">//6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="11-slice-substring"><a href="#11-slice-substring" class="headerlink" title="11. slice, substring"></a>11. slice, substring</h3><p>slice, substring：用来截取字符串的某个部分，参数为起始索引和结束索引+1，并返回新的。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'juejin'</span><span class="token punctuation">;</span><span class="token keyword">let</span> str2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> str3 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//jin jin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>slice和substring区别：<br>当接收的参数是负数时，slice会将它字符串的长度与对应的负数相加，substring则干脆将负参数都直接转换为0</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'juejin'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//in</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//juejin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="12-substr"><a href="#12-substr" class="headerlink" title="12. substr"></a>12. substr</h3><p>substr：用来截取字符串的某个部分，参数为起始索引和个数，并返回新的。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'juejin'</span><span class="token punctuation">;</span><span class="token keyword">let</span> str2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//jin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="13-split"><a href="#13-split" class="headerlink" title="13. split"></a>13. split</h3><p>split：把字符串以指定要去分割成字符串数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zhangsan juejin'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[ 'zhangsan', 'juejin' ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="14-startsWith"><a href="#14-startsWith" class="headerlink" title="14. startsWith"></a>14. startsWith</h3><p>startsWith：检测字符串是否以指定字符串开头</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'kerwin love'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'kerwin'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="15-toLowerCase-toUpperCase"><a href="#15-toLowerCase-toUpperCase" class="headerlink" title="15. toLowerCase,toUpperCase"></a>15. toLowerCase,toUpperCase</h3><p>toLowerCase,toUpperCase：将字符串转换大小写</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'jueJin'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//juejin</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//JUEJIN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="16-trim"><a href="#16-trim" class="headerlink" title="16. trim"></a>16. trim</h3><p>trim：去除字符串两端的空格</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'  jue  jin  '</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//jue  jin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="17-parseInt"><a href="#17-parseInt" class="headerlink" title="17. parseInt"></a>17. parseInt</h3><p>parseInt：解析一个字符串，返回整数，第二个参数为解析的数字的基数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token string">'101'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Number方法"><a href="#Number方法" class="headerlink" title="Number方法"></a>Number方法</h2><h3 id="18-isFinite"><a href="#18-isFinite" class="headerlink" title="18. isFinite"></a>18. isFinite</h3><p>isFinite：检测传入的参数是否是一个有穷数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="19-toExponential"><a href="#19-toExponential" class="headerlink" title="19. toExponential"></a>19. toExponential</h3><p>toExponential：转换成指数计数法,参数为小数位数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">5.21</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toExponential</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//5.2e+0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="20-toFixed"><a href="#20-toFixed" class="headerlink" title="20. toFixed"></a>20. toFixed</h3><p>toFixed：保留x位小数,并转换成字符串</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token number">5.213</span><span class="token punctuation">;</span><span class="token keyword">let</span> res <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//5.2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-toPrecision"><a href="#21-toPrecision" class="headerlink" title="21. toPrecision"></a>21. toPrecision</h3><p>toPrecision：变成指定长度，并转换成字符串</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">133.520</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//134</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="22-toString"><a href="#22-toString" class="headerlink" title="22. toString"></a>22. toString</h3><p>toString：把数字转换成字符串，参数为转换进制</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//101</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="感谢阅读"><a href="#感谢阅读" class="headerlink" title="感谢阅读"></a>感谢阅读</h2><p>　　非常感谢您到阅读到最后，如果有错误希望您能够指出，以免误导其他人，如果您觉得对您有帮助的话，希望能够点个赞，加个关注，有任何问题都可以联系我，希望能够一起进步。<br><br>　　最后祝您前程似锦，我们各自攀登，高处相见🌈！</p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础--JS的对象方法详解</title>
      <link href="/2021/05/01/qian-duan-ji-chu-js-de-dui-xiang-fang-fa/"/>
      <url>/2021/05/01/qian-duan-ji-chu-js-de-dui-xiang-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>JS的对象方法不管是在面试，还是在工作中做项目，亦或者是在了解JS或者JS框架的原理中都非常的重要，本文详细总结了JS中的对象方法，让你做到对它们的用法一网打尽。</p><p>食用对象：初级前端<br><br>美味指数：😋😋😋😋😋</p><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><h3 id="1-Object-create"><a href="#1-Object-create" class="headerlink" title="1. Object.create"></a>1. Object.create</h3><p>Object.create(proto，[propertiesObject])：创建一个对象，第一个参数为新对象的原型对象<br>第二个参数可配置新对象自身的属性</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  b<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    value<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>   <span class="token comment">//属性值</span>    enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">//是否可枚举</span>    writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment">//是否可以重写值</span>    configurable<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">//是否可以修改以上几项配置</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token comment">//&#123; b: 2 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//&#123; a: 1 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Object-defineProperty-obj-prop-descriptor-："><a href="#2-Object-defineProperty-obj-prop-descriptor-：" class="headerlink" title="2.Object.defineProperty(obj, prop, descriptor)："></a>2.Object.defineProperty(obj, prop, descriptor)：</h3><p>Object.defineProperty(obj, prop, descriptor)：<br><br>　　在指定对象上定义一个新属性或者修改一个属性，并进行相应配置，第一个参数为配置的对象，第二个参数为要定义或修改的属性名，第三个属性为属性描述符</p><ul><li>value：属性值</li><li>writable：定义是否可重写，默认为false</li><li>enumerable：定义是否可枚举，默认为false</li><li>configurable：定义描述符是否可以改变，默认为false</li><li>get：属性的getter函数，访问属性时会执行此函数，默认为undefine</li><li>set：属性的setter函数，修改属性时，会调用此函数，默认为undefined<br>属性描述符分为：数据描述符和存取描述符<br></li><li>数据描述符是一个具有值的属性，该值可以是可写的，也可以是不可写的</li><li>存取描述符是由getter函数和setter函数所描述的属性<br>如果一个描述符同时拥有 value 或 writable 和 get 或 set 键，则会产生一个异常。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">//定义是否可重写</span>  enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token comment">//定义是否可枚举</span>  configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">//定义是否可配置</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-Object-assign"><a href="#3-Object-assign" class="headerlink" title="3. Object.assign"></a>3. Object.assign</h3><p>Object.assign(target, …sources)：将一个或多个对象的可枚举属性分配到目标对象，并返回目标对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>b<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>b<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//&#123; a: 1, b: 4, c: 5 &#125; 注意后面的源对象属性会覆盖前面的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-Object-freeze"><a href="#4-Object-freeze" class="headerlink" title="4. Object.freeze"></a>4. Object.freeze</h3><p>Object.freeze：</p><ul><li>冻结一个对象，冻结后便不能被修改<br></li><li>不能添加新属性，也不能删除属性，不能修改属性描述符，原型也不能修改。<br></li><li>但是如果一个属性的值是个对象，则这个对象中的属性是可以修改的，除非它也是个冻结对象，数组作为一种对象，被冻结，其元素不能被修改。没有数组元素可以被添加或移除。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  object<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    b<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>obj<span class="token punctuation">.</span>object<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>object<span class="token punctuation">)</span>  <span class="token comment">// &#123; b: 6 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Object-getOwnPropertyDescriptor"><a href="#5-Object-getOwnPropertyDescriptor" class="headerlink" title="5.Object.getOwnPropertyDescriptor"></a>5.Object.getOwnPropertyDescriptor</h3>Object.getOwnPropertyDescriptor：返回指定对象上一个自有属性对应的属性描述符，不能是原型上的。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> des <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>des<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>des<span class="token punctuation">.</span>writable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-Object-getOwnPropertyNames"><a href="#6-Object-getOwnPropertyNames" class="headerlink" title="6.Object.getOwnPropertyNames"></a>6.Object.getOwnPropertyNames</h3>Object.getOwnPropertyNames：返回指定对象自身（不包括原型）所有的属性名（包括可枚举和不可枚举）组成的数组<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> res <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [ 'a', 'b' ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="7-Object-getPrototypeOf"><a href="#7-Object-getPrototypeOf" class="headerlink" title="7. Object.getPrototypeOf"></a>7. Object.getPrototypeOf</h3>Object.getPrototypeOf：返回指定对象的原型对象<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token punctuation">&#123;</span>b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#123; b: 2 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-Object-is"><a href="#8-Object-is" class="headerlink" title="8. Object.is"></a>8. Object.is</h3>Object.is：比较两个值是否相等，除了NaN，+0和-0之外，其他与===相同<pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-Object-seal"><a href="#9-Object-seal" class="headerlink" title="9. Object.seal"></a>9. Object.seal</h3>Object.seal：密封一个对象，不能添加新属性以及当前属性不可配置，但是属性值得可写性不变<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-Object-preventExtensions"><a href="#10-Object-preventExtensions" class="headerlink" title="10. Object.preventExtensions"></a>10. Object.preventExtensions</h3>Object.preventExtensions：让一个对象变得不可扩展，不能添加新属性<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>b<span class="token punctuation">)</span>  <span class="token comment">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-Object-isExtensible"><a href="#11-Object-isExtensible" class="headerlink" title="11. Object.isExtensible"></a>11. Object.isExtensible</h3>Object.isExtensible：判断一个对象是否可以扩展</li></ul><p>Object.preventExtensions，Object.seal 或 Object.freeze 方法都可以标记一个对象为不可扩展</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-Object-keys"><a href="#12-Object-keys" class="headerlink" title="12. Object.keys"></a>12. Object.keys</h3><p>Object.keys：返回对象自身（不包括原型）可枚举属性组成的数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'jack'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>  __proto__<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    address<span class="token operator">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//[ 'name', 'age' ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-Object-values"><a href="#13-Object-values" class="headerlink" title="13. Object.values"></a>13. Object.values</h3><p>Object.values：返回对象自身（不包括原型）可枚举属性值组成的数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'jack'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>  __proto__<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    address<span class="token operator">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//[ 'jack', 13 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-Object-entries"><a href="#14-Object-entries" class="headerlink" title="14. Object.entries"></a>14. Object.entries</h3><p>Object.entries：返回对象自身（不包括原型）可枚举属性的键值对数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'jack'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>  __proto__<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    address<span class="token operator">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//[ [ 'name', 'jack' ], [ 'age', 13 ] ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="感谢阅读"><a href="#感谢阅读" class="headerlink" title="感谢阅读"></a>感谢阅读</h2><p>　　非常感谢您到阅读到最后，如果有错误希望您能够指出，以免误导其他人，如果您觉得对您有帮助的话，希望能够点个赞，加个关注，有任何问题都可以联系我，希望能够一起进步。<br><br>　　最后祝您前程似锦，我们各自攀登，高处相见🌈！</p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础--HTML与CSS</title>
      <link href="/2021/04/16/qian-duan-ji-chu-html-yu-css/"/>
      <url>/2021/04/16/qian-duan-ji-chu-html-yu-css/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>　　大家好，我是Kerwin丶R，最近把自己的笔记整理总结，希望能够帮助到更多的人，能够和您一起进步。如果文章有问题，希望能够及时提出，以免误导更多的人。<br/><br>　<br>食用对象：初级前端 &amp; 在校生<br><br>美味指数：😋😋😋😋😋</p><p>如果您是大佬，先给您问个好，建议您Alt+F4，这篇文章不适合您啦😛</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><hr><h3 id="1-什么是DOCTYPE-⭐⭐⭐"><a href="#1-什么是DOCTYPE-⭐⭐⭐" class="headerlink" title="1.什么是DOCTYPE?⭐⭐⭐"></a>1.什么是DOCTYPE?⭐⭐⭐</h3><p>  　　DOCTYPE是document type的简写，它是一种标记语言的文档类型声明，<br>  即告诉浏览器当前 HTML 是用什么版本编写的,应该用何种规范来解析页面。<br>  在W3C标准出来之后，浏览器对页面的渲染有了统一的标准，这种渲染方式叫做标准模式。<br><code>&lt;!DOCTYPE&gt;</code>不存在或者形式不正确会导致HTML或XHTML文档以混杂模式呈现，<br>  就是把如何渲染html页面的权利交给了浏览器，有多少种浏览器就有多少种展示方式。</p><hr><h3 id="2-html语义化标签：⭐⭐⭐⭐"><a href="#2-html语义化标签：⭐⭐⭐⭐" class="headerlink" title="2.html语义化标签：⭐⭐⭐⭐"></a>2.html语义化标签：⭐⭐⭐⭐</h3><p>　含义：让标签有自己的含义</br><br>　1.让人更容易读懂（增加代码可读性），便于团队开发和维护</br><br>　2.方便其它设备以语义的方式来渲染网页，让搜索引擎更容易读懂（SEO）</p><hr><h3 id="3-src与href的区别⭐⭐⭐"><a href="#3-src与href的区别⭐⭐⭐" class="headerlink" title="3.src与href的区别⭐⭐⭐"></a>3.src与href的区别⭐⭐⭐</h3><p>  　src：指向外部资源位置，指向的内容将会嵌入到文档中当前标签所在位置,替换当前内容，<br>  同时会暂停其他资源的下载和处理，直至将该资源加载，编译，执行完毕，常用的有script、img。</br><br>  　href(Hypertext Reference的缩写,我一般读作HyRefer)：<br>  表示超文本引用,用来建立当前元素和文档之间的链接,同时会并行下载资源并且不会停止对当前文档的处理,常用的有：link、a。</p><hr><h3 id="4-meta标签⭐⭐⭐"><a href="#4-meta标签⭐⭐⭐" class="headerlink" title="4.meta标签⭐⭐⭐"></a>4.meta标签⭐⭐⭐</h3><p> 　<code>&lt;meta&gt;</code>标签提供关于 HTML 文档的元数据。它不会显示在页面上，但是对于机器是可读的。<br>  可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务，主要属性有http-equiv和name</p><hr><h3 id="5-块级元素和内联元素⭐⭐⭐⭐"><a href="#5-块级元素和内联元素⭐⭐⭐⭐" class="headerlink" title="5.块级元素和内联元素⭐⭐⭐⭐"></a>5.块级元素和内联元素⭐⭐⭐⭐</h3><ul><li>块级元素（独占一行）：div, h1, h2, table, form, ul, ol, p</li><li>内联元素（不独占一行）：span, img, input, button, a, i, label</li><li>区别：</br>块级元素总是占据一行，高度，宽度等都能设置</br>内联元素和其他元素在同一行的，并不自己占据一行，高度，宽度不能控制，只能容纳文本或者其他内联元素，margin只有left和right起作用</li></ul><hr><h3 id="6-SVG和Canvas的区别⭐⭐⭐"><a href="#6-SVG和Canvas的区别⭐⭐⭐" class="headerlink" title="6.SVG和Canvas的区别⭐⭐⭐"></a>6.SVG和Canvas的区别⭐⭐⭐</h3><p>　SVG：SVG 是一种使用 XML 描述 2D 图形的语言，绘制出来的每一个图形元素都是独立的DOM节点，可方便后期绑定事件或修改，不适合游戏应用。<br><br>　Canvas：Canvas 通过 JavaScript 来绘制 2D 图形，可以看做是一个画布，其绘制出来的图形为标量图，依赖分辨率，适合做游戏。</p><hr><h3 id="7-h5新增标签⭐⭐⭐⭐"><a href="#7-h5新增标签⭐⭐⭐⭐" class="headerlink" title="7.h5新增标签⭐⭐⭐⭐"></a>7.h5新增标签⭐⭐⭐⭐</h3><ul><li>header标签包含引导和导航等，通常包含<code>h1~h6</code>、搜索框、logo等。</li><li>footer标签一般配合address标签(显示地址)，包含作者信息、相关链接等。</br></li><li>nav标签一般包含多个a标签，构建导航组件。</br></li><li>aside标签主要装载广告、侧边栏。</br></li><li>article标签包含文章，一般内嵌header、footer、h1、p标签。</br></li><li>section标签可以用在以上任一一个标签中划分组件。</br></li><li>hgroup顾名思义是h1~h6的集合。</br></li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><hr><h3 id="1-CSS盒模型⭐⭐⭐⭐⭐"><a href="#1-CSS盒模型⭐⭐⭐⭐⭐" class="headerlink" title="1.CSS盒模型⭐⭐⭐⭐⭐"></a>1.CSS盒模型⭐⭐⭐⭐⭐</h3><p>组成：content(内容), padding(内边距), border(边框), margin(外边距)</p><p>1：<code>content-box</code>(W3C标准)(默认)<br>  width: 表示content:的宽度，不包含padding 和 border<br><br>2：<code>border-box</code>(IE标准)<br>  width: 表示content + padding + border 的总和<br><br>  <code>box-sizing</code>可以控制盒模型，默认为content-box</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01d30514da1b4968a53bc771eb40f92a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60d58550ba4c48fea340b2be983bb2f7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></h2><h3 id="2-margin重叠与margin负值问题⭐⭐⭐⭐"><a href="#2-margin重叠与margin负值问题⭐⭐⭐⭐" class="headerlink" title="2.margin重叠与margin负值问题⭐⭐⭐⭐"></a>2.margin重叠与margin负值问题⭐⭐⭐⭐</h3><p>margin重叠：<br><br>　1.相邻元素的margin-top和margin-bottom会发生重叠<br><br> 　 2.相邻元素的margin-right和margin-left不会发生重叠<br><br>margin负值：<br><br> 　 1.margin-top和margin-left负值，自身元素向上，向左移动<br><br> 　 2.margin-right负值，右侧元素左移，自身不受影响<br><br> 　 3.margin-bottom负值，下方元素上移，自身不受影响</p><hr><h3 id="3-BFC⭐⭐⭐⭐⭐"><a href="#3-BFC⭐⭐⭐⭐⭐" class="headerlink" title="3.BFC⭐⭐⭐⭐⭐"></a>3.BFC⭐⭐⭐⭐⭐</h3><p>含义：块级格式化上下文，一块独立渲染区域，内部元素的渲染不会影响边界以外的元素<br><br>1.常见的触发BFC的条件</p><ul><li>html根元素</li><li>float不是none的元素</li><li>position是absolute或fixed的元素</li><li>overflow不是visible的块元素</li><li>display是flex inline-block，table-cell的元素</li></ul><p>2.BFC的作用</p><ul><li>避免外边距重叠<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.box1</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #07d268<span class="token punctuation">;</span>        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box2</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #833cc9<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.wrap</span> <span class="token punctuation">&#123;</span>        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>清除浮动（给父级元素加上overflow: auto）</li><li>阻止元素被浮动元素覆盖（给被覆盖的元素加上overflow: auto）</li></ul><hr><h3 id="4-三栏布局⭐⭐⭐⭐"><a href="#4-三栏布局⭐⭐⭐⭐" class="headerlink" title="4.三栏布局⭐⭐⭐⭐"></a>4.三栏布局⭐⭐⭐⭐</h3><p>圣杯布局和双飞翼布局<br><br>目的：</p><ul><li> 三栏布局，中间一栏最先加载和渲染(内容最重要)<br></li><li> 两侧内容固定，中间内容随着宽度自适应<br></li><li> 一般用于PC网页<br><br>技术总结：</li><li> 使用float布局<br></li><li> 两侧使用margin负值，以便和中间内容横向重叠<br></li><li> 防止中间内容被两侧覆盖，一个用padding一个用margin<br>区别：<br></li><li> 双飞翼布局采用margin留出空位，而圣杯布局采用padding</li><li> 双飞翼布局采用margin-left负值后不用再根据自身定位，而圣杯布局需要<br>双飞翼布局代码：<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">body</span> <span class="token punctuation">&#123;</span>        <span class="token property">min-width</span><span class="token punctuation">:</span> 550px    <span class="token punctuation">&#125;</span>    <span class="token selector">.column</span> <span class="token punctuation">&#123;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#center</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #cccccc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#main</span> <span class="token punctuation">&#123;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0 190px 0 190px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#left</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #ffff00<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 190px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#right</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 190px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> -190px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        this is center    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this is left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this is right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>圣杯布局代码：<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">body</span> <span class="token punctuation">&#123;</span>        <span class="token property">min-width</span><span class="token punctuation">:</span> 550px    <span class="token punctuation">&#125;</span>    <span class="token selector">#header</span> <span class="token punctuation">&#123;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#container</span> <span class="token punctuation">&#123;</span>        <span class="token property">padding-left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">padding-right</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#container .column</span> <span class="token punctuation">&#123;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left    <span class="token punctuation">&#125;</span>    <span class="token selector">#center</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%    <span class="token punctuation">&#125;</span>    <span class="token selector">#left</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> 200px    <span class="token punctuation">&#125;</span>    <span class="token selector">#right</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> -150px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#footer</span> <span class="token punctuation">&#123;</span>        <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #f1f1f1    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this is center<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this is left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this is right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h3 id="5-两栏布局⭐⭐⭐⭐"><a href="#5-两栏布局⭐⭐⭐⭐" class="headerlink" title="5. 两栏布局⭐⭐⭐⭐"></a>5. 两栏布局⭐⭐⭐⭐</h3><p>知道了三栏布局，想来两栏布局对你一定不在话下，下面介绍三种两栏布局的方式，一定要掌握。</p><ul><li>绝对定位方式<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.wrap</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box1</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #d43131<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box2</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #07d268<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>浮动方式<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.box1</span> <span class="token punctuation">&#123;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #d43131<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box2</span> <span class="token punctuation">&#123;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #07d268<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>flex方式<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.wrap</span> <span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box1</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #d43131<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box2</span> <span class="token punctuation">&#123;</span>        <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #07d268<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ded5c26c05f40a9b2043f454fa73b67~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li></ul><hr><h3 id="5-关于浮动⭐⭐⭐⭐⭐"><a href="#5-关于浮动⭐⭐⭐⭐⭐" class="headerlink" title="5.关于浮动⭐⭐⭐⭐⭐"></a>5.关于浮动⭐⭐⭐⭐⭐</h3><p>浮动的特点：<br><br>　　浮动会使元素脱离标准流，不占据页面空间，会覆盖标准流的元素，但不会覆盖标准流元素的文字<br><br>　　元素会排列在父层元素的左边或左边，或排列在已经浮动的元素的左边或者右边<br>清除浮动的方法：<br></p><ul><li>触发BFC<br><br>给父级元素加上overflow: auto<br></li><li>利用伪元素（clearfix）<br><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix::after</span> <span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>多设置一个兄弟元素，加上clear:both，其他方法都大同小异。</li></ul><hr><h3 id="6-定位⭐⭐⭐⭐⭐"><a href="#6-定位⭐⭐⭐⭐⭐" class="headerlink" title="6.定位⭐⭐⭐⭐⭐"></a>6.定位⭐⭐⭐⭐⭐</h3><ul><li>static:默认定位</li><li>relative:依据自身定位</li><li>absolute:依据最近一层的定位元素定位</li><li>fixed:固定定位，元素的位置相对于浏览器窗口是固定位置</li><li>inherit:继承父元素的定位</li><li>sticky：粘性定位<br><br>依赖于用户的滚动，在 position:relative 与 position:fixed 定位之间切换。<br><br>它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。 </li></ul><hr><h3 id="7-水平垂直居中⭐⭐⭐⭐⭐"><a href="#7-水平垂直居中⭐⭐⭐⭐⭐" class="headerlink" title="7.水平垂直居中⭐⭐⭐⭐⭐"></a>7.水平垂直居中⭐⭐⭐⭐⭐</h3><p>重点，建议尝试多种方法</p><ul><li>利用absolute绝对定位，top和left: margin-left和margin-top都取负值，为元素自身宽高的一半</li><li>利用absolute绝对定位，top和left: 50%，transform: translate(-50%, -50%)</li><li>利用absolute绝对定位：top, left, bottom, right都设置为0 ，margin: auto</li><li>利用flex<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.father</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>利用grid，网格布局</li></ul><p>PS：行内元素还可以：<br><br>　水平居中：text-align: center<br><br>　垂直居中：line-height的值等于height</p><hr><h3 id="8-line-height的继承⭐⭐⭐"><a href="#8-line-height的继承⭐⭐⭐" class="headerlink" title="8.line-height的继承⭐⭐⭐"></a>8.line-height的继承⭐⭐⭐</h3><ul><li>父亲的line-height为具体的值，如30px，子孙则继承该值,</li><li>如果为比例，如2/1.5，则继承该比例，计算还是根据自己的font-size计算</li><li>如果为百分比，如200%，则继承根据父亲的font-size乘以比例计算出来的值。(考点)</li></ul><hr><h3 id="9-长度单位⭐⭐⭐⭐"><a href="#9-长度单位⭐⭐⭐⭐" class="headerlink" title="9.长度单位⭐⭐⭐⭐"></a>9.长度单位⭐⭐⭐⭐</h3><ul><li>px：相对长度单位。像素px是相对于显示器屏幕分辨率而言的</li><li>em：相对长度单位，相对于父元素，不常用</li><li>rem：相对长度单位，相对于根元素，常用于响应式布局</li></ul><hr><h3 id="10-响应式布局⭐⭐⭐⭐"><a href="#10-响应式布局⭐⭐⭐⭐" class="headerlink" title="10.响应式布局⭐⭐⭐⭐"></a>10.响应式布局⭐⭐⭐⭐</h3><p>含义：响应式布局指的是同一页面在不同屏幕尺寸下有不同的布局</p><p>实现方式：</p><p>1.媒体查询<br><br>2.百分比布局<br><br>　　通过百分比单位，可以使得浏览器中组件的宽和高随着浏览器的高度的变化而变化，从而实现响应式的效果<br><br>3.rem布局<br><br>　　REM是CSS3新增的单位，移动端的支持度很高，rem单位都是相对于根元素html的font-size来决定大小的<br><br>4.视口单位<br><br>　css3中新的单位vw/vh<br><br>　vw 相对于视窗的宽度，1vw 等于视口宽度的1%，即视窗宽度是100vw<br><br>　vh相对于视窗的高度，1vh 等于视口高度的1%，即视窗高度是100vh<br><br>　vmin vw和vh中的较小值<br><br>　vmax vw和vh中的较大值<br><br>　可以搭配rem使用<br></p><p>响应式设计与自适应设计的区别：</p><ul><li>响应式开发<code>一套</code>界面，通过检测视口分辨率，针对不同客户端在客户端做代码处理，来展现不同的布局和内容；</li><li>自适应需要开发<code>多套</code>界面，通过检测视口分辨率，来判断当前访问的设备是pc端、平板、手机，从而请求服务层，返回不同的页面。</li></ul><hr><h3 id="11-CSS选择器：⭐⭐⭐⭐"><a href="#11-CSS选择器：⭐⭐⭐⭐" class="headerlink" title="11. CSS选择器：⭐⭐⭐⭐"></a>11. CSS选择器：⭐⭐⭐⭐</h3><ul><li>类选择器：.X</li><li>id选择器：#X</li><li>标签选择器：div</li><li>通用选择器：*</li><li>后代选择器：X Y</li><li>子元素选择器：X&gt;Y</li><li>属性选择器：[attr]，选择所有包含attr属性的</li><li>相邻兄弟选择器：A+B，B是A的下一个兄弟节点，B紧跟A，匹配B</li><li>通用兄弟选择器    A~B    B是A之后的兄弟节点，匹配B，B可以使很多个</li><li>伪类选择器：例子：<br>　　:link 未访问的链接<br><br>　　:visited 已访问的链接<br><br>　　:hover 鼠标移动到链接上<br><br>　　:active 选定的链接<br><br>　　:first-child等等<br></li><li>伪元素选择器<br>　　::before<br><br>　　::after<br></li></ul><p>伪类和伪元素的区别：<br></p><ul><li>伪类：<br>　　为了能够表达无法通过简单的选择器表达的信息，或者说用来添加一些选择器的特殊效果，一般为单个冒号加一个伪类名称<br></li><li>伪元素：<br>　　伪元素用于创建一些不在文档树中的元素，并为其添加样式，虽然用户可以看到这些文本，但是这些文本实际上不再文档树中</li></ul><p>选择器权重：</p><ul><li>内联样式，如: style=”…”，权值为1000。</li><li>ID选择器，如：#content，权值为100。</li><li>类，伪类、属性选择器，如.content，权值为10。</li><li>类型选择器、伪元素选择器，如div p，权值为1。</li><li>通配符、子选择器、相邻选择器等。如* &gt; +，权值为0000。</li><li>如果有!important优先级将会被提升到最高</li></ul><hr><h3 id="12-import和link的区别-⭐⭐⭐"><a href="#12-import和link的区别-⭐⭐⭐" class="headerlink" title="12.@import和link的区别 ⭐⭐⭐"></a>12.@import和link的区别 ⭐⭐⭐</h3><ul><li>  link是html提供的标签，@import是css的语法规则，只能加载在style标签内和css文件中</li><li>  link不存在兼容问题，@import对低版本可能存在兼容问题</li><li>  加载页面时，link标签引入的 CSS 被同时加载；@import引入的 CSS 将在页面加载完毕后被加载</li></ul><hr><h3 id="13-display-none和visibility-hidden和opacity-0的区别⭐⭐⭐⭐"><a href="#13-display-none和visibility-hidden和opacity-0的区别⭐⭐⭐⭐" class="headerlink" title="13.display: none和visibility: hidden和opacity: 0的区别⭐⭐⭐⭐"></a>13.display: none和visibility: hidden和opacity: 0的区别⭐⭐⭐⭐</h3><ul><li>空间占据问题<br>display: none 隐藏后的元素不占据任何空间<br><br>visibility: hidden 和opacity: 0隐藏的元素空间依旧存在。</li><li>回流重绘问题<br>display: none 隐藏产生回流和重绘（reflow 和 repaint）<br><br>visibility: hidden和opacity: 0只产生重绘</li><li>继承性<br>display:none一旦设置自己和后代将会消失<br><br>visibility具有继承性，如果将子元素的visibility设置回visible，name子元素将会显示出来<br><br>opacity: 0 也会被子元素继承，但是不能通过设置子元素opacity: 0使其重新显示</li><li>事件绑定<br>display: none和visibility: hidden时绑定的事件不能触发<br><br>opacity: 0时绑定的事件能够触发。</li><li>过渡动画<br>transition对于display和visibility是无效的<br><br>transition对于opacity是有效的</li></ul><hr><h3 id="14-flex-⭐⭐⭐⭐⭐"><a href="#14-flex-⭐⭐⭐⭐⭐" class="headerlink" title="14.flex ⭐⭐⭐⭐⭐"></a>14.flex ⭐⭐⭐⭐⭐</h3><p>作为平时最常用的布局方式，这是必须详细掌握的，推荐<a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">阮一峰–flex</a><br>，以下是上面文章的部分总结：</p><p>flex是弹性盒子，任何一个容器都可以指定为 Flex 布局。<br><br>给容器设置display: flex后，它的所有子元素自动成为容器成员<br><br>容器默认存在两根轴：水平的主轴和垂直的交叉轴<br><br>容器有6个属性: <br></p><ul><li>flex-direction<br><br>  决定主轴的方向<br><br>  flex-direction: row | row-reverse | column | column-reverse</li><li>flex-wrap<br><br>  如果一条轴线排不下，如何换行。<br><br>  flex-wrap: nowrap | wrap | wrap-reverse</li><li>flex-flow<br><br>  是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap<br></li><li>justify-content<br><br>  定义了项目在主轴上的对齐方式。<br><br>  justify-content: flex-start | flex-end | center | space-between | space-around</li><li>align-items<br><br>  定义项目在交叉轴上如何对齐<br><br>  align-items: flex-start | flex-end | center | baseline | stretch（默认值）</li><li>align-content<br><br>  定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。<br><br>   align-content: flex-start | flex-end | center | space-between | space-around | stretch;</li></ul><hr><h3 id="15-画三角形或梯形⭐⭐⭐⭐"><a href="#15-画三角形或梯形⭐⭐⭐⭐" class="headerlink" title="15.画三角形或梯形⭐⭐⭐⭐"></a>15.画三角形或梯形⭐⭐⭐⭐</h3><ul><li>CSS方法：<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.box</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">border-right</span><span class="token punctuation">:</span> 100px solid transparent<span class="token punctuation">;</span>        <span class="token property">border-left</span><span class="token punctuation">:</span> 100px solid transparent<span class="token punctuation">;</span>        <span class="token property">border-top</span><span class="token punctuation">:</span> 100px solid #d43131<span class="token punctuation">;</span>        <span class="token property">border-bottom</span><span class="token punctuation">:</span> 100px solid transparent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38b2f1f2a3b842fab57fbd3f13357393~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br><br>如果需要画梯形就改变width的值即可</p><ul><li>Canvas方法：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>style<span class="token operator">></span>    #box2 <span class="token punctuation">&#123;</span>        width<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        height<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>    <span class="token operator">&lt;</span>canvas id<span class="token operator">=</span><span class="token string">"box2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>canvas<span class="token operator">></span>    <span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#box2'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     ctx<span class="token punctuation">.</span>fillStyle<span class="token operator">=</span><span class="token string">"#8989e7"</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23a95003816d4e138896e8cb2bce396c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><hr><h3 id="16-z-index⭐⭐⭐"><a href="#16-z-index⭐⭐⭐" class="headerlink" title="16. z-index⭐⭐⭐"></a>16. z-index⭐⭐⭐</h3><p>　　关于z-index，起初我只知道设置position后z-index大的就会在上面，但是实际做项目却出现了许许多多的问题<br><br>　　推荐一篇讲z-index很全面的文章<a href="https://juejin.cn/post/6844903667175260174">彻底搞懂CSS层叠上下文、层叠等级、层叠顺序、z-index</a></p><ul><li>  首先需要比较两个元素是否在同一个层叠上下文里，如果是再根据以下层叠顺序图比较，如果不是，就需要比较他们层叠上下文的层叠顺序<br>　PS：层叠顺序表<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28382b519692434cbbe9482cb6c31f67~tplv-k3u1fbpfcp-zoom-1.image" title="层叠顺序表"></li></ul><hr><h3 id="17-CSS3新特性⭐⭐⭐⭐"><a href="#17-CSS3新特性⭐⭐⭐⭐" class="headerlink" title="17. CSS3新特性⭐⭐⭐⭐"></a>17. CSS3新特性⭐⭐⭐⭐</h3><ul><li>  边框圆角 border-radius</li><li>  阴影box-shadow</li><li>选择器：<br><br>  属性选择器  [attr]：选择包含attr属性的标签  [attr^=value]：选择attr属性值以value开头的标签<br><br>  伪类选择器  first-child, nth-child(n)</li><li>  颜色渐变  linear-gradient</li><li>  2D变换<br><br>　　translate()：对元素进行进行移动<br><br>　　scale()：对元素进行缩放<br><br>　　rotate()：围绕中心旋转，正值顺时针，负值逆时针</li><li>  动画  transition  animation</li><li>  flex布局</li></ul><hr><h3 id="18-DOM树和CSSOM的构建过程⭐⭐"><a href="#18-DOM树和CSSOM的构建过程⭐⭐" class="headerlink" title="18. DOM树和CSSOM的构建过程⭐⭐"></a>18. DOM树和CSSOM的构建过程⭐⭐</h3><p>DOM树和CSSOM的构建过程其实差不多</p><ol><li>首先解析文件（HTML文件，CSS文件）</li><li>将字节转换成字符</li><li>确定tokens（标签）</li><li>将tokens转换成节点</li><li>最后根据节点构建DOM树 || CSSOM<br>PS：构建DOM树的图和CSSOM的图，一看就明白</li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b0df487195d4977bec98166c5f165bb~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8790ad83f4c045a7b1a58142d2ca0de7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><hr><h3 id="19-回流和重绘⭐⭐⭐⭐⭐"><a href="#19-回流和重绘⭐⭐⭐⭐⭐" class="headerlink" title="19. 回流和重绘⭐⭐⭐⭐⭐"></a>19. 回流和重绘⭐⭐⭐⭐⭐</h3><ul><li>回流（重排或布局）<br></li></ul><p>当渲染树中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建，这就称为回流<br></p><ul><li><p>重绘<br>当渲染树中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如background-color。则就叫称为重绘</p></li><li><p>回流和重绘发生的时机：<br>首先，回流一定会发生重绘，重绘不一定会回流，在页面第一次加载时一定会回流和重绘</p></li><li><p>会发生回流的例子：<br>页面首次渲染的时候<br><br>添加或删除可见的DOM元素<br><br>元素的位置发生变化<br><br>元素的尺寸发生变化<br><br>内容发生变化，比如文本变化（文字大小、行高发生变化）<br><br>浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）</p></li><li><p>列举几个会发生重绘的元素属性：<br>color<br><br>background-color<br><br>box-shadow<br><br>border-radius<br><br>visibility<br></p></li><li><p>如何减少回流和重绘</p></li></ul><ol><li>DOM操作时很贵的，要尽可能少得操作DOM，通过合并多次DOM样式的修改，来减少回流和重绘的发生次数</li><li>如果需要对一个DOM进行大量操作，可以先用display：none进行隐藏，操作后再显示，这样就只引发两次回流和重绘</li><li>对于复杂动画效果,使用绝对定位让其脱离文档流</li><li> 使用css3硬件加速，可以让transform、opacity、filters这些动画不会引起回流重绘</li><li>浏览器队列机制：回流和重绘的开销很多，所以浏览器维护一个队列，当有回流和重绘时会放入这个队列，当达到了一定数量或者达到了一定的时间间隔才会触发，这样就会让多次变成一次，但是有一些元素会强制触发队列，需要注意<br>　　offsetTop、offsetLeft、offsetWidth、offsetHeight<br><br>　　scrollTop、scrollLeft、scrollWidth、scrollHeight<br><br>　　clientTop、clientLeft、clientWidth、clientHeight<br><br>　　getComputedStyle()<br><br>　　getBoundingClientRect<br></li></ol><hr><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>　　非常感谢您到阅读到最后，有任何问题都可以联系我，希望能够一起进步。<br><br>　　最后祝您前程似锦，我们各自攀登，高处相见🌈！</p><hr><p>参考文章：<br><br><a href="https://juejin.cn/post/6844903779700047885">你真的了解回流和重绘吗</a><br><br><a href="https://juejin.cn/post/6844903667175260174">彻底搞懂CSS层叠上下文、层叠等级、层叠顺序、z-index</a><br><br><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">阮一峰–flex</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
