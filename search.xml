<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端基础--JS是灵魂</title>
      <link href="/2021/07/31/qian-duan-ji-chu-js-shi-ling-hun/"/>
      <url>/2021/07/31/qian-duan-ji-chu-js-shi-ling-hun/</url>
      
        <content type="html"><![CDATA[<h3 id="1-JS的数据类型有哪些？"><a href="#1-JS的数据类型有哪些？" class="headerlink" title="1.JS的数据类型有哪些？"></a>1.JS的数据类型有哪些？</h3><p>值类型都是存在栈中，引用类型的值存在堆中，栈中存的变量和内存地址，内存地址指向堆中的值，<br>这样存储是因为性能问题<br><br><code>基本数据类型：</code></p><ul><li>Number</li><li>String</li><li>Boolean</li><li>Null</li><li>Undefined</li><li>Symbol（ES6新增数据类型）</li><li>bigInt<br><code>引用数据类型：</code></li><li>Object</li><li>Array</li><li>Date</li><li>Function(特殊, 但不用于存储数据，所以没有“拷贝，复制函数”这一说)</li><li>RegExp</li></ul><h3 id="2-在js里怎么判断数据类型？"><a href="#2-在js里怎么判断数据类型？" class="headerlink" title="2.在js里怎么判断数据类型？"></a>2.在js里怎么判断数据类型？</h3><p><code>typeof</code>：<br><br>1.能判断所有值类型(string, number, boolean, undefined, Symbol)<br><br>2.能判断函数<br><br>3.能识别引用类型(不能再继续识别)</p><p><code>instanceof</code>：<br><br>1.判断对象对否处于目标对象的原型链上<br><br>2.一般用来区分引用类型，不能判断字面量的基本数据类型<br></p><p><code>Object.prototype.toString.call()</code><br><br>可以区分具体的基本类型和引用类型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"kerwin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "[object String]" </span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "[object Array]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-手写instanceof"><a href="#3-手写instanceof" class="headerlink" title="3.手写instanceof"></a>3.手写instanceof</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//遍历A的原型链，如果找到B.prototype，返回true，否则返回false</span><span class="token keyword">const</span> <span class="token function-variable function">_instanceof</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token constant">A</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">===</span> <span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    p <span class="token operator">=</span> p<span class="token punctuation">.</span>__proto__  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-var和let-const的区别"><a href="#4-var和let-const的区别" class="headerlink" title="4.var和let const的区别"></a>4.var和let const的区别</h3><ul><li>var是ES5语法，let const是ES6语法，var有变量提升，但其实let和const也会提升，但是会有暂时性死区，在定义前不可用</li><li>var和let是变量，可修改，const是常量，不可修改，但是如果使用const声明的是对象的话，是可以修改对象里面的值的</li><li>let const有块级作用域，var没有</li></ul><h3 id="5-关于数组的遍历方案，有哪些区别？"><a href="#5-关于数组的遍历方案，有哪些区别？" class="headerlink" title="5.关于数组的遍历方案，有哪些区别？"></a>5.关于数组的遍历方案，有哪些区别？</h3><p><code>for：</code><br><br>最基础常见的一种循环，不用多说<br></p><ol><li>continue 语句用来跳出本次循环，但会继续执行后面的循环。</li><li>break 语句用来结束循环，后面的循环不会再执行。</li><li>return 并不能用来跳出for循环，return语句只能出现在函数体内，它会终止函数的执行，并返回一个指定的值。</li></ol><p><code>forEach：</code><br><br>　　对数组的每个元素执行一次提供的函数，其中函数有三个参数，依次为：当前循环项的内容、当前循环的索引、循环的数组</p><p><code>map()：</code><br><br>　　方法会依次循环每一项，并且返回结果映射组成一个新的数组<br><br>　　使用forEach、map不能中断循环，方法会将每项内容都执行完成才会结束循环。</p><p><code>for in：</code><br><br>遍历的是key（可遍历对象、数组或字符串的key），最好用来遍历对象<br><br>使用for-in可以遍历数组，但是会存在以下问题：</p><ol><li>index索引为字符串型数字（注意，非数字），不能直接进行几何运算。</li><li>遍历顺序有可能不是按照实际数组的内部顺序（可能按照随机顺序）。</li><li>使用for-in会遍历数组所有的可枚举属性，包括原型。通常需要配合hasOwnProperty()方法判断某个属性是否该对象的实例属性，来将原型对象从循环中剔除。<br><code>for-of：</code><br>遍历的是value（可遍历对象、数组或字符串的value）<br></li><li>这是最简洁、最直接的遍历数组元素的语法，这个方法避开了for-in循环的所有缺陷。</li><li>与forEach()不同的是，它可以正确响应break、continue和return语句。</li><li>因此建议是使用for-of遍历数组，因为for-of遍历的只是数组内的元素，而不包括数组的原型属性method和索引name。</li></ol><h3 id="6-什么是原型链？"><a href="#6-什么是原型链？" class="headerlink" title="6.什么是原型链？"></a>6.什么是原型链？</h3><p><code>原型关系：</code></p><ol><li>每个构造函数都有显示原型prototype</li><li>每个实例都有隐式原型_proto_</li><li>实例的_proto_指向对应构造函数的prototype</li><li>获取属性和方法时，先从自身属性和方法寻找，如果找不到则自动去_proto_中寻找</li></ol><p><code>原型链：</code><br><br>　　当访问一个对象的某个属性时，会现在这个对象本身属性上查找，如果没有找到，则会去他的__proro__隐式原型上查找，即他的构造函数的prototype，如果还没有找到就会再在构造函数的prototype的__proto__中查找，一直往上层查找，直到到null还没有找到，则返回undefined<br>Object.prototype.—proto—===null这，这样一层一层向上查找就会形成一个链式结构，我们称为原型链</p><h3 id="7-什么是自由变量"><a href="#7-什么是自由变量" class="headerlink" title="7.什么是自由变量"></a>7.什么是自由变量</h3><p><code>自由变量：</code><br><br>　　一个变量在当前作用域没有定义，但被使用了。会向上级作用域一层一层依次寻找，直到找到为止，如果到全局作用域都没找到，则报错<br><br>　　所有自由变量的查找，是在函数定义的地方，向上级作用域查找，不是在执行的地方</p><h3 id="8-什么是作用域，作用域链"><a href="#8-什么是作用域，作用域链" class="headerlink" title="8. 什么是作用域，作用域链"></a>8. 什么是作用域，作用域链</h3><p><code>作用域：</code></p><ul><li>作用域决定了代码区块中变量和其他资源的可见性，作用域就是一个独立的地盘，让变量不会外泄、暴露出去</li><li>也就是说作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。</li><li>ES6 之前 JavaScript 没有块级作用域，只有全局作用域和函数作用域。ES6的到来，为我们提供了  块级作用域<br><code>作用域链：</code></li><li>当所需要的变量在所在的作用域中查找不到的时候，它会一层一层向上查找，</li><li>直到找到全局作用域还没有找到的时候，就会放弃查找。这种一层一层的关系，就是作用域链<br>作用域和执行上下文：<br><br>JavaScript的执行分为：解释和执行两个阶段<br><br><code>解释阶段：</code><ul><li>词法分析</li><li>语法分析</li><li>作用域规则确定<br><code>执行阶段：</code></li><li>创建执行上下文</li><li>执行函数代码</li><li>垃圾回收</li></ul></li></ul><ol><li>JavaScript解释阶段便会确定作用域规则，因此作用域在函数定义时就已经确定了，而不是在函数调用时确定，但是执行上下文是函数执行之前创建的。</li><li>执行上下文最明显的就是this的指向是执行时确定的,而作用域访问的变量是编写代码的结构确定的。<br>作用域和执行上下文之间最大的<code>区别</code>是：</li></ol><ul><li>执行上下文在运行时确定，随时可能改变；作用域在定义时就确定，并且不会改变。</li><li>同一个作用域下，不同的调用会产生不同的执行上下文环境，所以this指向就不同<h3 id="9-说一说this"><a href="#9-说一说this" class="headerlink" title="9. 说一说this"></a>9. 说一说this</h3></li></ul><ol><li>this取值，是在函数执行的时候确定的，不是在定义的时候确定的，this默认情况下指向window，严格模式下为undefined</li><li>隐式绑定：<br><br>即this指向距离其最近的调用者，所谓的最近的调用者就函数前面最近的一个对象。<br><br>显示绑定：<br><br>1、call, apply, bind 中的this会指向传入的第一个参数<br><br>2、如果这些函数调用时没有传入参数，则指向默认对象(window或undefined)</li><li>构造函数中的this指向该函数创建的实例对象</li><li>箭头函数本身并不存在this，其this是由其父级作用域继承而来，箭头函数中的this无法通过bind、call、apply进行修改。</li><li>立即执行函数中的this就一句话：永远指向全局window<h3 id="10-谈一谈闭包"><a href="#10-谈一谈闭包" class="headerlink" title="10. 谈一谈闭包"></a>10. 谈一谈闭包</h3>闭包：<br><br>含义：闭包就是能够读取其他函数内部变量的函数<br><br>理解：</li><li>无论通过哪种方式将内部的函数传递到所在的词法作用域以外，它都会持有对原始作用域的引用，无论在何处执行这个函数都会使用闭包。<br></li><li>让这些变量的值始终保存在内存中，这是因为闭包的执行依赖外部函数中的变量，只有闭包执行完，才会释放变量所占的内存<br>应用：</li><li>闭包的应用比较典型是定义模块，我们将操作函数暴露给外部，而细节隐藏在模块内部</li><li>防抖节流<h3 id="11-手写apply"><a href="#11-手写apply" class="headerlink" title="11. 手写apply"></a>11. 手写apply</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> ctx <span class="token operator">=</span> context <span class="token operator">||</span> window  <span class="token comment">//最重要的一步，1.myApply内部的this是指向调用者fn函数的。</span>  <span class="token comment">//2.ctx.func就是fn函数，ctx调用了fn函数，因此fn函数内部的this指向ctx</span>  ctx<span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> ctx<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> ctx<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">delete</span> ctx<span class="token punctuation">.</span>func  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-手写bind"><a href="#12-手写bind" class="headerlink" title="12. 手写bind"></a>12. 手写bind</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bind1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//将参数拆解为数组</span>  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取this(数组第一项)</span>  <span class="token keyword">const</span> t <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//fn1.bind(...)中的fn1</span>  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token comment">//返回一个函数</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">self</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> args<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-手写flatern，考虑多层级"><a href="#13-手写flatern，考虑多层级" class="headerlink" title="13.手写flatern，考虑多层级"></a>13.手写flatern，考虑多层级</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> isDeep <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isDeep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arr  <span class="token comment">//已经是flatern</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>   <span class="token comment">//arr里的每个元素都会通过concat连接</span>  <span class="token keyword">return</span> <span class="token function">flat</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-手写new"><a href="#14-手写new" class="headerlink" title="14. 手写new"></a>14. 手写new</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 创建一个空对象</span>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 使空对象的隐式原型指向原函数的显式原型</span>  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> fn<span class="token punctuation">.</span>prototype  <span class="token comment">// this指向obj</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span>  <span class="token comment">// 返回</span>  <span class="token keyword">return</span> result <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="15-手写trim"><a href="#15-手写trim" class="headerlink" title="15. 手写trim"></a>15. 手写trim</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">trim</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\s+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\s+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="16-手写柯里化"><a href="#16-手写柯里化" class="headerlink" title="16. 手写柯里化"></a>16. 手写柯里化</h3>实现例如add(1)(2)(3)(4)=10　　add(1)(1,2,3)(2)=9<br><br>指的是将一个接受多个参数的函数，变为接受一个参数返回一个函数的固定形式<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>  <span class="token keyword">let</span> <span class="token function-variable function">adder</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token keyword">return</span> adder  <span class="token punctuation">&#125;</span>  adder<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> a <span class="token operator">+</span> b    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> adder<span class="token punctuation">&#125;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token comment">/*ƒ () &#123;      args.push(...arguments)      return adder    &#125;ƒ () &#123;      args.push(...arguments)      return adder    &#125;truetrue*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-手写深度比较"><a href="#17-手写深度比较" class="headerlink" title="17. 手写深度比较"></a>17. 手写深度比较</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//判断是否是对象或数组</span><span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!==</span> <span class="token string">'null'</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token parameter">obj1<span class="token punctuation">,</span> obj2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//值类型(注意，参与equal的一般不会是函数)</span>    <span class="token keyword">return</span> obj1 <span class="token operator">===</span> obj2  <span class="token punctuation">&#125;</span>  <span class="token comment">//两个都是对象或数组，而且不相等</span>  <span class="token comment">//1.先取出obj1和obj2的keys，比较个数</span>  <span class="token keyword">const</span> obj1Keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>  <span class="token keyword">const</span> obj2Keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj1Keys<span class="token punctuation">.</span>length <span class="token operator">!==</span> obj2Keys<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//2.以obj1为基准，和obj2一次递归比较</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEqual</span><span class="token punctuation">(</span>obj1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> obj2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="18-手写深拷贝"><a href="#18-手写深拷贝" class="headerlink" title="18. 手写深拷贝"></a>18. 手写深拷贝</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//obj是null，或者不是对象或数组，直接返回</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//初始化返回结果</span>  <span class="token keyword">let</span> result<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//递归调用</span>      result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="19-介绍一下什么是DOM？"><a href="#19-介绍一下什么是DOM？" class="headerlink" title="19. 介绍一下什么是DOM？"></a>19. 介绍一下什么是DOM？</h3><code>DOM：</code></li></ol><ul><li>即文档对象模型，DOM定义了访问HTML和XML文档的标准。</li><li>DOM把整个页面映射为一个多层的节点结构，html或xml页面中的每个组成部分都是某种类型的节点，这些节点又包含着不同类型的数据。</li><li>它允许程序和脚本动态地访问和更新文档的内容、结构和样式。</li><li>DOM节点有元素节点，文本节点，属性节点等12种，有很多方法获取节点和操作节点<h3 id="20-介绍一下ajax并手写"><a href="#20-介绍一下ajax并手写" class="headerlink" title="20. 介绍一下ajax并手写"></a>20. 介绍一下ajax并手写</h3><code>ajax原理：</code></li><li>通过浏览器的javascript对象XMLHttpRequest(Ajax引擎)对象向服务器发送异步请求并接收服务器的响应数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。</li><li>用户的请求间接通过Ajax引擎发出而不是通过浏览器直接发出，同时Ajax引擎也接收服务器返回响应的数据，所以不会导致浏览器上的页面全部刷新。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 手写一般写promise封装的就可以了</span><span class="token keyword">function</span> <span class="token function">ajaxPromiseGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'test.json'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'404 not found'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> p<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>xhr.readyState:</li><li>0-(未初始化)还没有调用send()方法</li><li>1-(载入)已调用send()方法，正在发送请求</li><li>2-(载入完成)send()方法执行完成，已经接收到全部相应内容</li><li>3-(交互)正在解析响应内容</li><li>4-(完成)相应内容解析完成，可以在客户端调用</li></ul><p>xhr.status:</p><ul><li>2xx-表示成功处理请求，如200</li><li>3xx-需要重定向。浏览器直接跳转，如301 302 304</li><li>4xx-客户端请求错误，如404 403</li><li>5xx-服务端错误<h3 id="21-介绍一下什么是JSON？"><a href="#21-介绍一下什么是JSON？" class="headerlink" title="21. 介绍一下什么是JSON？"></a>21. 介绍一下什么是JSON？</h3></li><li>json是一种数据格式，本质是一段字符串</li><li>json格式和JS对象结构一致，对JS语言更友好</li><li>window.JSON是一个全局对象：JSON.stringify，JSON.parse</li><li>不能有单引号，都需要双引号<h3 id="22-介绍一下JS的垃圾回收机制"><a href="#22-介绍一下JS的垃圾回收机制" class="headerlink" title="22.介绍一下JS的垃圾回收机制"></a>22.介绍一下JS的垃圾回收机制</h3><code>垃圾回收机制回收的对象：</code></li><li>JavaScript 中的原始类型的值存放在栈内存中，由系统自动分配释放。</li><li>引用类型的值存放于堆内存中，其生命周期由JavaScript引擎的垃圾回收机制决定。<br>垃圾回收机制分为：引用计数和标记清除<br><br><code>引用计数：</code></li></ul><ol><li>基本思路就是对每个值都记录其被引用的次数。当一个值的引用数为0的时候，说明没有任何变量引用它，就可以安全的回收其内存了。</li><li>垃圾回收器会在下次进行垃圾回收的时候，释放引用次数为0的值的内存。<br>引用记数的问题：</li></ol><ul><li>循环引用。即对象A有一个属性指向B,B也有一个属性指向A。</li><li>这样A、B对象的引用计数都为2，就永远不会被垃圾回收器回收。久而久之，会造成大量的内存无法被回收，造成内存泄漏。由于存在比较明显的问题，所以主要存在于早期的IE浏览器<br><code>标记清除：</code><br><br>可达性：<br><br>可达值是那些以某种方式可访问或可用的值，他们不会被垃圾回收机制清除、释放，可达性是判断一个值是否会被垃圾回收的重要依据。<br><br>下面是一些固有可达值的集合，所占用的空间不能被释放。</li><li>当前函数的局部变量和参数</li><li>嵌套调用时调用链上所有函数的变量与参数</li><li>全局变量以及还有一些内部的<br>这些值称为根，如果一个值可以从根通过引用或引用链被访问，就被认为是可达的。<br><br>标记清除的过程<br>垃圾收集器会定期执行以下步骤，进行垃圾回收。</li></ul><ol><li>垃圾收集器找到所有根并标记他们</li><li>遍历并标记根的引用</li><li>然后标记引用的引用，直至标记所有可达的对象</li><li>剩余没有被标记的对象都会被删除<br>现今主流浏览器都采用标记清除，来管理引用值的内存<h3 id="24-介绍一下什么是跨域"><a href="#24-介绍一下什么是跨域" class="headerlink" title="24.介绍一下什么是跨域"></a>24.介绍一下什么是跨域</h3>重点：<br><br>　　跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。<br><br>为什么拦截？<br></li></ol><ul><li>同源策略：ajax请求时，浏览器要求当前网页和server必须同源，浏览器安全的基石是同源策略</li><li>同源：协议，域名，端口，三者必须一致</li><li>目的：为了保证用户信息的安全，防止恶意的网站窃取数据。<br>例外：<br></li></ul><ol><li>加载图片，css，js可无视同源策略</li><li><code>&lt;img/&gt;</code>可用于统计打点，可使用第三方统计服务</li><li><code>&lt;link/&gt;``&lt;script&gt;</code>可使用CDN,CDN一般都是外域<h3 id="25-介绍一下jsonp跨域？"><a href="#25-介绍一下jsonp跨域？" class="headerlink" title="25. 介绍一下jsonp跨域？"></a>25. 介绍一下jsonp跨域？</h3><code>jsonp原理：</code><br><br>　　script标签src属性中的链接可以访问跨域的js脚本，利用这个特性，用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据返回，服务端不再返回JSON格式的数据，而是返回一段调用某个函数的js代码，在src中进行了调用，这样实现了跨域<br><br>jsonp优缺点<br></li></ol><ul><li>JSONP优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。</li><li>缺点是仅支持get方法具有局限性,不安全可能会遭受XSS攻击。<h3 id="26-介绍一下CORS跨域？"><a href="#26-介绍一下CORS跨域？" class="headerlink" title="26. 介绍一下CORS跨域？"></a>26. 介绍一下CORS跨域？</h3><code>CORS跨域：</code><br><br>　　CORS是跨源AJAX请求的根本解决方法。JSONP只能发GET请求，但是CORS允许任何类型的请求。<br>浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多一次附加的请求，但用户不会有感觉。因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。<br><br>浏览器将CORS请求分成两类：简单请求和非简单请求<br><br><code>简单请求：</code><br><br>需要同时满足下面两大条件：<br><br>（1) 请求方法是以下三种方法之一：</li><li>HEAD</li><li>GET</li><li>POST<br>（2）HTTP的头信息 Request Headers 不超出以下几种字段：</li><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</li></ul><ol><li>对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段</li><li>origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求</li><li>如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段</li><li>最重要的是Access-Control-Allow-Origin 该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。</li><li>还有一些字段控制是否发送cookie等<br><code>非简单请求：</code><br></li><li>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。</li><li>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为预检请求</li><li>“预检”请求用的请求方法是OPTIONS，表示这个请求是用来询问的。头信息里面，关键字段是Origin，表示请求来自哪个源。</li><li>除了Origin字段，”预检”请求的头信息包括两个特殊字段。</li></ol><ul><li>Access-Control-Request-Method<br>该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。</li><li>Access-Control-Request-Headers<br>该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header。<br></li><li>服务器收到”预检”请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后确认允许跨源请求，就可以做出回应，回应的关键同样是Access-Control-Allow-Origin字段<br>PS：</li><li>可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），</li><li>浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。</li><li>服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 HTTP 认证相关数据）。<h3 id="27-介绍一下Nginx？"><a href="#27-介绍一下Nginx？" class="headerlink" title="27.介绍一下Nginx？"></a>27.介绍一下Nginx？</h3></li></ul><ol><li>正向代理：一般用于个人访问某服务内部，比如你要访问Google，但是通常情况下，你无法访问，这时聪明的我们会花钱或者免费找一个代理服务器，让它去访问Google，然后再通过它返回数据给你，此时对于Google来说，他不知道具体实际访问它的client是谁，此过程为正向代理。</li><li>反向代理：一般用于公司提供对外服务，比如一般的公司，为了保证内网的安全，阻止web攻击，实现负载均衡减少请求压力，会在web节点之前搭建一个代理服务器，比如nginx，此时，用户访问的是nginx代理服务器，而对于用户来说，他不知道具体为他提供服务的是哪个真实的server节点，此过程为反向代理。<br><code>举个栗子：</code><br><br>当前前端域名为：<code>http://127.0.0.1</code><br><br>后端server域名为：<code>https://github.com</code><br><br>我想直接获取<code>https://github.com</code>的内容肯定是不行的，会出现跨域<br><br>现在就需要需要启动一个nginx服务器，在配置文件<code>nginx.conf</code>中做出如下配置<br><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>  <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">proxy_pass</span>  <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">3000</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">location</span> <span class="token operator">~</span> <span class="token operator">/</span>api<span class="token operator">/</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">proxy_pass</span>  <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>上面的配置的可以理解为：</li></ol><blockquote><p>监听80端口（Nginx默认启动了80端口），将<code>http://127.0.0.1</code>的所有请求服务转发到<code>127.0.0.1</code>端口为<code>3000</code>；<br>将<code>http://127.0.0.1/api/</code>或者<code>http://127.0.0.1/api/xxxxx</code>请求转发到<code>http://github.com</code><br>服务器和服务器中是不存在跨域的，nginx正是利用了这一点，将前端访问同源服务器，而同源服务器将请求转发到不同域的服务器从而获取数据</p></blockquote><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>　　非常感谢您到阅读到最后，如果您觉得对您有帮助的话，希望能够点个赞，有任何问题都可以联系我，希望能够一起进步。<br><br>　　最后祝您前程似锦，我们各自攀登，高处相见🌈！</p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础--ES5和ES6数组方法</title>
      <link href="/2021/07/24/qian-duan-ji-chu-es5-he-es6-shu-zu-fang-fa-xiang-jie/"/>
      <url>/2021/07/24/qian-duan-ji-chu-es5-he-es6-shu-zu-fang-fa-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>　　JS的数组方法不管是在工作中，或者是在做算法时都是非常重要的，也许一个API就能让你少写很多逻辑。<br><br>　　本文详细总结了ES5，ES6的数组方法，让你做到对他们的用法一网打尽。</p><p>食用对象：初级前端<br><br>美味指数：😋😋😋😋😋</p><h1 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h1><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><p>作用：删去数组最后一个值，返回值为删去的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [ 1, 2 ] 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h3><p>作用：删去数组第一个值，返回值为删去的值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [ 2, 3 ] 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>作用：在数组末尾加上一个值，返回值为数组的长度</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [ 1, 2, 3, 5 ] 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h3><p>作用：在数组开头加上一个值，返回值为数组的长度</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [ 5, 1, 2, 3 ] 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><p>作用：用于连接两个或多个数组，不改变原数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//[ 1, 2, 3, 11, 12, 13 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p>作用：用于翻转数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [ 3, 2, 1 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>作用：指定分隔符后，将数组转为字符串并返回，不改变原数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//[ 1, 2, 3 ] 1-2-3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><p>作用：截取数组，截取从下标为第一个参数开始到第二个参数（不包括，且为可选参数）的数组，不改变原数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//[ 2, 3 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p>作用：截取数组，第一个参数为开始下标，第二个参数为截取个数，第三个参数为添加的数，返回截取的数组，改变原数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>  res<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// [ 1, 'a', 5 ] [ 2, 3, 4 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p>作用：用于对数组的元素进行排序，并返回数组。默认排序顺序是根据字符串UniCode码，会改变原数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//升序</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment">//[ 1, 2, 3, 4, 5 ]</span><span class="token comment">//降序</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>   <span class="token comment">//[ 5, 4, 3, 2, 1 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><p>作用：将数组转化成字符串,不改变原数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'掘金'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//1,2,掘金 [ 1, 2, '掘金' ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><p>作用：查询数组是否含有指定元素，含有就返回下标，没有就返回-1</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>lastIndexOf</code>：搜索数组中的元素，并返回它最后出现的位置。</p><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p>作用：数组每个元素执行一次回调函数, 返回值为undefined</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//1, 2, 3</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//0, 1, 2</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//[ 1, 2, 3 ]</span>  <span class="token keyword">return</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> res<span class="token punctuation">)</span>   <span class="token comment">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>作用：遍历数组元素传给回调函数处理，返回处理后的新数组，不改变原数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//1, 2, 3</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//0, 1, 2</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[1, 2, 3]</span>  <span class="token keyword">return</span> value<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[2, 4, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="filter"><a href="#filter" class="headerlink" title="filter:"></a>filter:</h3><p>作用：遍历数组元素传给回调函数，返回所有结果为true的元素组成的数组，不改变原数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment">//[ 1, 2 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><p>作用：遍历数组元素传给回调函数，结果有一个为true则由some()返回true</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><p>作用：遍历数组元素传给回调函数，所有结果都为true则由every()返回true</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>作用：归并，从左往右迭代数组的所有项最终计算为一个值，并返回<br><br>第一个参数：上一次调用回调时的返回值，或者初始值 init<br><br>第二个参数：表示当前正在处理的数组元素<br><br>第三个参数：表示当前正在处理的数组元素的索引<br><br>末尾参数：表示初始值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//求数组各项之和：</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span>   <span class="token comment">//0,1,3,6,10</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>   <span class="token comment">//1,2,3,4,5</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>  <span class="token comment">//0,1,2,3,4</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>   <span class="token comment">//[ 1, 2, 3, 4, 5 ]</span>  <span class="token keyword">return</span> pre <span class="token operator">+</span> cur<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token comment">//15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>作用：所有数组成员依次执行回调函数，直到找出第一个返回值为true的成员并返回该成员，如果没有则返回undefined<br><br>第一个参数为当前元素，第二个为索引值，第三个为当前元素所属数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//0</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[ 1, -1, 3, 6 ]</span>  <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment">//1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex:"></a>findIndex:</h3><p>作用：所有数组成员依次执行回调函数，直到找出第一个返回值为true的成员并返回该成员在数组中的位置，如果没有则返回-1</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1, -1</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//0, 1</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[ 1, -1, 3, 6 ]</span>  <span class="token keyword">return</span> value <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin"></a>copyWithin</h3><p>作用：将指定位置指定数量的数组成员复制到其他位置，会改变原数组<br><br>第一个参数：从该位置开始替换数据<br><br>第二个参数：从该位置开始读取数据，默认为 0<br><br>第三个参数：到该位置前停止读取数据，默认等于数组长度</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment">//[ 1, 4, 3, 4, 5 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><p>作用：使用给定值，填充数组,会改变原数组<br><br>第一个参数：填充的数<br><br>第二个参数：从该位置开始填充，默认为 0<br><br>第三个参数：到该位置前停止填充，默认等于数组长度。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment">//[ 1, 2, 'a', 'a', 5 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><p>作用：返回一个布尔值，表示数组是否包含某个数<br><br>第一个参数：需要查找的值<br><br>第二个参数：搜索的起始位置</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h3><p>作用：拍平数组，默认拍平一层，可加拍平层数, 不改变原数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>   <span class="token comment">//[1, 2, 3, 4, 5, 6, 7, 8]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h3><p>作用：对原数组的每个成员执行一个函数，然后对返回值组成的数组执行flat()方法，返回一个新数组, 不改变原函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">[</span>item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment">//[ [ 2 ], [ 4 ], [ 6 ] ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="keys-values，entries"><a href="#keys-values，entries" class="headerlink" title="keys, values，entries"></a>keys, values，entries</h3><p>作用：用于遍历数组，返回一个遍历器对象，可以用for…of循环进行遍历<br><br>keys()是对键名的遍历<br>values()是对键值的遍历<br>entries()是对键值对的遍历</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">of</span> arr<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//0, 1, 2</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> arr<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//1, a, 3</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>index<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> arr<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0 1, 1 a, 2 3</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h1><h3 id="Array-isArray（ES5）"><a href="#Array-isArray（ES5）" class="headerlink" title="Array.isArray（ES5）"></a>Array.isArray（ES5）</h3><p>作用：判断一个对象是否数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'掘金'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Array-from（ES6）"><a href="#Array-from（ES6）" class="headerlink" title="Array.from（ES6）"></a>Array.from（ES6）</h3><p>作用：将类数组或者可遍历的对象转换成真正的数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Set(3) &#123; 1, 2, 3 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[ 1, 2, 3 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Array-of（ES6）"><a href="#Array-of（ES6）" class="headerlink" title="Array.of（ES6）"></a>Array.of（ES6）</h3><p>作用：用于将一组值转换成数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> res <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//[ 1, 'a', 2, 3 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="this问题"><a href="#this问题" class="headerlink" title="this问题"></a>this问题</h2><p>还可接收第二个参数作为当前this的方法有：<br><br>forEach，map，reduce，every，some，filter，find，findIndex<br><br>注意此时不要写成箭头函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//以forEach为例子：</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>age<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//1, 2, 3</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//0, 1, 2</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//[ 1, 2, 3 ]</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//3   注意这里this指向了obj</span>  <span class="token keyword">return</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>没有副作用，不改变原数组<br>join，concat，slice，toString，forEach，filter，map，reduce，flat</li><li>会改变原数组：<br>push，pop，shift，unshift，reverse，splice，sort，copyWithin，fill</li></ul><h2 id="感谢阅读"><a href="#感谢阅读" class="headerlink" title="感谢阅读"></a>感谢阅读</h2><p>　　非常感谢您到阅读到最后，如果有错误希望您能够指出，以免误导其他人，如果您觉得对您有帮助的话，希望能够点个赞，加个关注，有任何问题都可以联系我，希望能够一起进步。<br><br>　　最后祝您前程似锦，我们各自攀登，高处相见🌈！</p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础--JS的对象方法详解</title>
      <link href="/2021/07/23/qian-duan-ji-chu-js-de-dui-xiang-fang-fa/"/>
      <url>/2021/07/23/qian-duan-ji-chu-js-de-dui-xiang-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>JS的对象方法不管是在面试，还是在工作中做项目，亦或者是在了解JS或者JS框架的原理中都非常的重要，本文详细总结了JS中的对象方法，让你做到对它们的用法一网打尽。</p><p>食用对象：初级前端<br><br>美味指数：😋😋😋😋😋</p><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><h3 id="1-Object-create"><a href="#1-Object-create" class="headerlink" title="1. Object.create"></a>1. Object.create</h3><p>Object.create(proto，[propertiesObject])：创建一个对象，第一个参数为新对象的原型对象<br>第二个参数可配置新对象自身的属性</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  b<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    value<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>   <span class="token comment">//属性值</span>    enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">//是否可枚举</span>    writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment">//是否可以重写值</span>    configurable<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">//是否可以修改以上几项配置</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token comment">//&#123; b: 2 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//&#123; a: 1 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Object-defineProperty-obj-prop-descriptor-："><a href="#2-Object-defineProperty-obj-prop-descriptor-：" class="headerlink" title="2.Object.defineProperty(obj, prop, descriptor)："></a>2.Object.defineProperty(obj, prop, descriptor)：</h3><p>Object.defineProperty(obj, prop, descriptor)：<br><br>　　在指定对象上定义一个新属性或者修改一个属性，并进行相应配置，第一个参数为配置的对象，第二个参数为要定义或修改的属性名，第三个属性为属性描述符</p><ul><li>value：属性值</li><li>writable：定义是否可重写，默认为false</li><li>enumerable：定义是否可枚举，默认为false</li><li>configurable：定义描述符是否可以改变，默认为false</li><li>get：属性的getter函数，访问属性时会执行此函数，默认为undefine</li><li>set：属性的setter函数，修改属性时，会调用此函数，默认为undefined<br>属性描述符分为：数据描述符和存取描述符<br></li><li>数据描述符是一个具有值的属性，该值可以是可写的，也可以是不可写的</li><li>存取描述符是由getter函数和setter函数所描述的属性<br>如果一个描述符同时拥有 value 或 writable 和 get 或 set 键，则会产生一个异常。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">//定义是否可重写</span>  enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token comment">//定义是否可枚举</span>  configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">//定义是否可配置</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-Object-assign"><a href="#3-Object-assign" class="headerlink" title="3. Object.assign"></a>3. Object.assign</h3><p>Object.assign(target, …sources)：将一个或多个对象的可枚举属性分配到目标对象，并返回目标对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>b<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>b<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//&#123; a: 1, b: 4, c: 5 &#125; 注意后面的源对象属性会覆盖前面的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-Object-freeze"><a href="#4-Object-freeze" class="headerlink" title="4. Object.freeze"></a>4. Object.freeze</h3><p>Object.freeze：</p><ul><li>冻结一个对象，冻结后便不能被修改<br></li><li>不能添加新属性，也不能删除属性，不能修改属性描述符，原型也不能修改。<br></li><li>但是如果一个属性的值是个对象，则这个对象中的属性是可以修改的，除非它也是个冻结对象，数组作为一种对象，被冻结，其元素不能被修改。没有数组元素可以被添加或移除。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  object<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    b<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>obj<span class="token punctuation">.</span>object<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>object<span class="token punctuation">)</span>  <span class="token comment">// &#123; b: 6 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Object-getOwnPropertyDescriptor"><a href="#5-Object-getOwnPropertyDescriptor" class="headerlink" title="5.Object.getOwnPropertyDescriptor"></a>5.Object.getOwnPropertyDescriptor</h3>Object.getOwnPropertyDescriptor：返回指定对象上一个自有属性对应的属性描述符，不能是原型上的。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> des <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>des<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>des<span class="token punctuation">.</span>writable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-Object-getOwnPropertyNames"><a href="#6-Object-getOwnPropertyNames" class="headerlink" title="6.Object.getOwnPropertyNames"></a>6.Object.getOwnPropertyNames</h3>Object.getOwnPropertyNames：返回指定对象自身（不包括原型）所有的属性名（包括可枚举和不可枚举）组成的数组<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> res <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [ 'a', 'b' ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="7-Object-getPrototypeOf"><a href="#7-Object-getPrototypeOf" class="headerlink" title="7. Object.getPrototypeOf"></a>7. Object.getPrototypeOf</h3>Object.getPrototypeOf：返回指定对象的原型对象<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token punctuation">&#123;</span>b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#123; b: 2 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-Object-is"><a href="#8-Object-is" class="headerlink" title="8. Object.is"></a>8. Object.is</h3>Object.is：比较两个值是否相等，除了NaN，+0和-0之外，其他与===相同<pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-Object-seal"><a href="#9-Object-seal" class="headerlink" title="9. Object.seal"></a>9. Object.seal</h3>Object.seal：密封一个对象，不能添加新属性以及当前属性不可配置，但是属性值得可写性不变<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-Object-preventExtensions"><a href="#10-Object-preventExtensions" class="headerlink" title="10. Object.preventExtensions"></a>10. Object.preventExtensions</h3>Object.preventExtensions：让一个对象变得不可扩展，不能添加新属性<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>b<span class="token punctuation">)</span>  <span class="token comment">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-Object-isExtensible"><a href="#11-Object-isExtensible" class="headerlink" title="11. Object.isExtensible"></a>11. Object.isExtensible</h3>Object.isExtensible：判断一个对象是否可以扩展</li></ul><p>Object.preventExtensions，Object.seal 或 Object.freeze 方法都可以标记一个对象为不可扩展</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-Object-keys"><a href="#12-Object-keys" class="headerlink" title="12. Object.keys"></a>12. Object.keys</h3><p>Object.keys：返回对象自身（不包括原型）可枚举属性组成的数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'jack'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>  __proto__<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    address<span class="token operator">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//[ 'name', 'age' ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-Object-values"><a href="#13-Object-values" class="headerlink" title="13. Object.values"></a>13. Object.values</h3><p>Object.values：返回对象自身（不包括原型）可枚举属性值组成的数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'jack'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>  __proto__<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    address<span class="token operator">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//[ 'jack', 13 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-Object-entries"><a href="#14-Object-entries" class="headerlink" title="14. Object.entries"></a>14. Object.entries</h3><p>Object.entries：返回对象自身（不包括原型）可枚举属性的键值对数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'jack'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>  __proto__<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    address<span class="token operator">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//[ [ 'name', 'jack' ], [ 'age', 13 ] ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="感谢阅读"><a href="#感谢阅读" class="headerlink" title="感谢阅读"></a>感谢阅读</h2><p>　　非常感谢您到阅读到最后，如果有错误希望您能够指出，以免误导其他人，如果您觉得对您有帮助的话，希望能够点个赞，加个关注，有任何问题都可以联系我，希望能够一起进步。<br><br>　　最后祝您前程似锦，我们各自攀登，高处相见🌈！</p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础--JS中字符串与数字方法</title>
      <link href="/2021/07/21/qian-duan-ji-chu-js-zhong-zi-fu-chuan-yu-shu-zi-fang-fa/"/>
      <url>/2021/07/21/qian-duan-ji-chu-js-zhong-zi-fu-chuan-yu-shu-zi-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>JS字符串和数字的方法不管是在面试，还是在工作中，亦或者是在做算法都是非常重要的，也许一个API就能让你少写很多逻辑。<br>　　本文详细总结了字符串和数字的方法，让你做到对他们的用法一网打尽。</p><p>食用对象：初级前端<br>美味指数：😋😋😋😋😋</p><h2 id="String方法"><a href="#String方法" class="headerlink" title="String方法"></a>String方法</h2><h3 id="1-创建字符串"><a href="#1-创建字符串" class="headerlink" title="1. 创建字符串"></a>1. 创建字符串</h3><p>首先，创建字符串有两种方法<br><br>注意通过构造函数（如 new String(“string”)）创建出来的是封装了基本类型值（如 “string”）的封装对象<br><br>同时字符串的方法并不改变原字符串的值，而是返回一个新字符串</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> stringA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> stringB <span class="token operator">=</span> <span class="token string">'string'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> stringA<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> stringB<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-charAt"><a href="#2-charAt" class="headerlink" title="2. charAt"></a>2. charAt</h3><p>charAt：返回一个字符串中指定位置的字符</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'jueJin'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//e</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-concat"><a href="#3-concat" class="headerlink" title="3.concat"></a>3.concat</h3><p>concat：连接两个字符串，返回新的字符串</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zhangsan'</span><span class="token punctuation">;</span><span class="token keyword">let</span> str2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">' juejin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//zhangsan juejin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-indexOf"><a href="#4-indexOf" class="headerlink" title="4. indexOf"></a>4. indexOf</h3><p>indexOf:返回某个指定字符在字符串中首次出现的位置</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'juejin'</span><span class="token punctuation">;</span><span class="token keyword">let</span> n <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-lastIndexOf"><a href="#5-lastIndexOf" class="headerlink" title="5. lastIndexOf"></a>5. lastIndexOf</h3><p>lastIndexOf：从后往前搜索，其他与indexOf一样</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'juejin'</span><span class="token punctuation">;</span><span class="token keyword">let</span> n <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'j'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-includes"><a href="#6-includes" class="headerlink" title="6. includes"></a>6. includes</h3><p>includes：查询一个字符串中是否包括指定的字符子串</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zhangsan'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'san'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-match"><a href="#7-match" class="headerlink" title="7. match"></a>7. match</h3><p>match：一般用来找一个或多个正则表达式的匹配，返回值为一个数组，里面有所有匹配的值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zhangsan123 juejin456'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[ '1', '2', '3', '4', '5', '6' ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="8-repeat"><a href="#8-repeat" class="headerlink" title="8. repeat"></a>8. repeat</h3><p>repeat：复制字符串指定次数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'juejin'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//juejinjuejinjuejin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="9-replace"><a href="#9-replace" class="headerlink" title="9. replace"></a>9. replace</h3><p>replace：查找匹配的并替换，一般与正则表达式集合。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'juejin'</span><span class="token punctuation">;</span><span class="token keyword">let</span> str2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">jue</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">'zhangsan '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//zhangsan jin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="10-search"><a href="#10-search" class="headerlink" title="10. search"></a>10. search</h3><p>search：一般与正则表达式结合，查找某个值，查到了返回查到的索引值，未查到返回-1</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'juejin123'</span><span class="token punctuation">;</span><span class="token keyword">let</span> n <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  <span class="token comment">//6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="11-slice-substring"><a href="#11-slice-substring" class="headerlink" title="11. slice, substring"></a>11. slice, substring</h3><p>slice, substring：用来截取字符串的某个部分，参数为起始索引和结束索引+1，并返回新的。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'juejin'</span><span class="token punctuation">;</span><span class="token keyword">let</span> str2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> str3 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//jin jin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>slice和substring区别：<br>当接收的参数是负数时，slice会将它字符串的长度与对应的负数相加，substring则干脆将负参数都直接转换为0</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'juejin'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//in</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//juejin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="12-substr"><a href="#12-substr" class="headerlink" title="12. substr"></a>12. substr</h3><p>substr：用来截取字符串的某个部分，参数为起始索引和个数，并返回新的。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'juejin'</span><span class="token punctuation">;</span><span class="token keyword">let</span> str2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//jin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="13-split"><a href="#13-split" class="headerlink" title="13. split"></a>13. split</h3><p>split：把字符串以指定要去分割成字符串数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zhangsan juejin'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[ 'zhangsan', 'juejin' ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="14-startsWith"><a href="#14-startsWith" class="headerlink" title="14. startsWith"></a>14. startsWith</h3><p>startsWith：检测字符串是否以指定字符串开头</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'kerwin love'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'kerwin'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="15-toLowerCase-toUpperCase"><a href="#15-toLowerCase-toUpperCase" class="headerlink" title="15. toLowerCase,toUpperCase"></a>15. toLowerCase,toUpperCase</h3><p>toLowerCase,toUpperCase：将字符串转换大小写</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'jueJin'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//juejin</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//JUEJIN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="16-trim"><a href="#16-trim" class="headerlink" title="16. trim"></a>16. trim</h3><p>trim：去除字符串两端的空格</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'  jue  jin  '</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//jue  jin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="17-parseInt"><a href="#17-parseInt" class="headerlink" title="17. parseInt"></a>17. parseInt</h3><p>parseInt：解析一个字符串，返回整数，第二个参数为解析的数字的基数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token string">'101'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Number方法"><a href="#Number方法" class="headerlink" title="Number方法"></a>Number方法</h2><h3 id="18-isFinite"><a href="#18-isFinite" class="headerlink" title="18. isFinite"></a>18. isFinite</h3><p>isFinite：检测传入的参数是否是一个有穷数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="19-toExponential"><a href="#19-toExponential" class="headerlink" title="19. toExponential"></a>19. toExponential</h3><p>toExponential：转换成指数计数法,参数为小数位数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">5.21</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toExponential</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//5.2e+0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="20-toFixed"><a href="#20-toFixed" class="headerlink" title="20. toFixed"></a>20. toFixed</h3><p>toFixed：保留x位小数,并转换成字符串</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token number">5.213</span><span class="token punctuation">;</span><span class="token keyword">let</span> res <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//5.2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-toPrecision"><a href="#21-toPrecision" class="headerlink" title="21. toPrecision"></a>21. toPrecision</h3><p>toPrecision：变成指定长度，并转换成字符串</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">133.520</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//134</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="22-toString"><a href="#22-toString" class="headerlink" title="22. toString"></a>22. toString</h3><p>toString：把数字转换成字符串，参数为转换进制</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//101</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="感谢阅读"><a href="#感谢阅读" class="headerlink" title="感谢阅读"></a>感谢阅读</h2><p>　　非常感谢您到阅读到最后，如果有错误希望您能够指出，以免误导其他人，如果您觉得对您有帮助的话，希望能够点个赞，加个关注，有任何问题都可以联系我，希望能够一起进步。<br><br>　　最后祝您前程似锦，我们各自攀登，高处相见🌈！</p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础--HTML与CSS</title>
      <link href="/2021/07/16/qian-duan-ji-chu-html-yu-css/"/>
      <url>/2021/07/16/qian-duan-ji-chu-html-yu-css/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>　　大家好，我是Kerwin丶R，最近把自己的笔记整理总结，希望能够帮助到更多的人，能够和您一起进步。如果文章有问题，希望能够及时提出，以免误导更多的人。<br/><br>　<br>食用对象：初级前端 &amp; 在校生<br><br>美味指数：😋😋😋😋😋</p><p>如果您是大佬，先给您问个好，建议您Alt+F4，这篇文章不适合您啦😛</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><hr><h3 id="1-什么是DOCTYPE-⭐⭐⭐"><a href="#1-什么是DOCTYPE-⭐⭐⭐" class="headerlink" title="1.什么是DOCTYPE?⭐⭐⭐"></a>1.什么是DOCTYPE?⭐⭐⭐</h3><p>  　　DOCTYPE是document type的简写，它是一种标记语言的文档类型声明，<br>  即告诉浏览器当前 HTML 是用什么版本编写的,应该用何种规范来解析页面。<br>  在W3C标准出来之后，浏览器对页面的渲染有了统一的标准，这种渲染方式叫做标准模式。<br><code>&lt;!DOCTYPE&gt;</code>不存在或者形式不正确会导致HTML或XHTML文档以混杂模式呈现，<br>  就是把如何渲染html页面的权利交给了浏览器，有多少种浏览器就有多少种展示方式。</p><hr><h3 id="2-html语义化标签：⭐⭐⭐⭐"><a href="#2-html语义化标签：⭐⭐⭐⭐" class="headerlink" title="2.html语义化标签：⭐⭐⭐⭐"></a>2.html语义化标签：⭐⭐⭐⭐</h3><p>　含义：让标签有自己的含义</br><br>　1.让人更容易读懂（增加代码可读性），便于团队开发和维护</br><br>　2.方便其它设备以语义的方式来渲染网页，让搜索引擎更容易读懂（SEO）</p><hr><h3 id="3-src与href的区别⭐⭐⭐"><a href="#3-src与href的区别⭐⭐⭐" class="headerlink" title="3.src与href的区别⭐⭐⭐"></a>3.src与href的区别⭐⭐⭐</h3><p>  　src：指向外部资源位置，指向的内容将会嵌入到文档中当前标签所在位置,替换当前内容，<br>  同时会暂停其他资源的下载和处理，直至将该资源加载，编译，执行完毕，常用的有script、img。</br><br>  　href(Hypertext Reference的缩写,我一般读作HyRefer)：<br>  表示超文本引用,用来建立当前元素和文档之间的链接,同时会并行下载资源并且不会停止对当前文档的处理,常用的有：link、a。</p><hr><h3 id="4-meta标签⭐⭐⭐"><a href="#4-meta标签⭐⭐⭐" class="headerlink" title="4.meta标签⭐⭐⭐"></a>4.meta标签⭐⭐⭐</h3><p> 　<code>&lt;meta&gt;</code>标签提供关于 HTML 文档的元数据。它不会显示在页面上，但是对于机器是可读的。<br>  可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务，主要属性有http-equiv和name</p><hr><h3 id="5-块级元素和内联元素⭐⭐⭐⭐"><a href="#5-块级元素和内联元素⭐⭐⭐⭐" class="headerlink" title="5.块级元素和内联元素⭐⭐⭐⭐"></a>5.块级元素和内联元素⭐⭐⭐⭐</h3><ul><li>块级元素（独占一行）：div, h1, h2, table, form, ul, ol, p</li><li>内联元素（不独占一行）：span, img, input, button, a, i, label</li><li>区别：</br>块级元素总是占据一行，高度，宽度等都能设置</br>内联元素和其他元素在同一行的，并不自己占据一行，高度，宽度不能控制，只能容纳文本或者其他内联元素，margin只有left和right起作用</li></ul><hr><h3 id="6-SVG和Canvas的区别⭐⭐⭐"><a href="#6-SVG和Canvas的区别⭐⭐⭐" class="headerlink" title="6.SVG和Canvas的区别⭐⭐⭐"></a>6.SVG和Canvas的区别⭐⭐⭐</h3><p>　SVG：SVG 是一种使用 XML 描述 2D 图形的语言，绘制出来的每一个图形元素都是独立的DOM节点，可方便后期绑定事件或修改，不适合游戏应用。<br><br>　Canvas：Canvas 通过 JavaScript 来绘制 2D 图形，可以看做是一个画布，其绘制出来的图形为标量图，依赖分辨率，适合做游戏。</p><hr><h3 id="7-h5新增标签⭐⭐⭐⭐"><a href="#7-h5新增标签⭐⭐⭐⭐" class="headerlink" title="7.h5新增标签⭐⭐⭐⭐"></a>7.h5新增标签⭐⭐⭐⭐</h3><ul><li>header标签包含引导和导航等，通常包含<code>h1~h6</code>、搜索框、logo等。</li><li>footer标签一般配合address标签(显示地址)，包含作者信息、相关链接等。</br></li><li>nav标签一般包含多个a标签，构建导航组件。</br></li><li>aside标签主要装载广告、侧边栏。</br></li><li>article标签包含文章，一般内嵌header、footer、h1、p标签。</br></li><li>section标签可以用在以上任一一个标签中划分组件。</br></li><li>hgroup顾名思义是h1~h6的集合。</br></li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><hr><h3 id="1-CSS盒模型⭐⭐⭐⭐⭐"><a href="#1-CSS盒模型⭐⭐⭐⭐⭐" class="headerlink" title="1.CSS盒模型⭐⭐⭐⭐⭐"></a>1.CSS盒模型⭐⭐⭐⭐⭐</h3><p>组成：content(内容), padding(内边距), border(边框), margin(外边距)</p><p>1：<code>content-box</code>(W3C标准)(默认)<br>  width: 表示content:的宽度，不包含padding 和 border<br><br>2：<code>border-box</code>(IE标准)<br>  width: 表示content + padding + border 的总和<br><br>  <code>box-sizing</code>可以控制盒模型，默认为content-box</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01d30514da1b4968a53bc771eb40f92a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60d58550ba4c48fea340b2be983bb2f7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></h2><h3 id="2-margin重叠与margin负值问题⭐⭐⭐⭐"><a href="#2-margin重叠与margin负值问题⭐⭐⭐⭐" class="headerlink" title="2.margin重叠与margin负值问题⭐⭐⭐⭐"></a>2.margin重叠与margin负值问题⭐⭐⭐⭐</h3><p>margin重叠：<br><br>　1.相邻元素的margin-top和margin-bottom会发生重叠<br><br> 　 2.相邻元素的margin-right和margin-left不会发生重叠<br><br>margin负值：<br><br> 　 1.margin-top和margin-left负值，自身元素向上，向左移动<br><br> 　 2.margin-right负值，右侧元素左移，自身不受影响<br><br> 　 3.margin-bottom负值，下方元素上移，自身不受影响</p><hr><h3 id="3-BFC⭐⭐⭐⭐⭐"><a href="#3-BFC⭐⭐⭐⭐⭐" class="headerlink" title="3.BFC⭐⭐⭐⭐⭐"></a>3.BFC⭐⭐⭐⭐⭐</h3><p>含义：块级格式化上下文，一块独立渲染区域，内部元素的渲染不会影响边界以外的元素<br><br>1.常见的触发BFC的条件</p><ul><li>html根元素</li><li>float不是none的元素</li><li>position是absolute或fixed的元素</li><li>overflow不是visible的块元素</li><li>display是flex inline-block，table-cell的元素</li></ul><p>2.BFC的作用</p><ul><li>避免外边距重叠<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.box1</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #07d268<span class="token punctuation">;</span>        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box2</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #833cc9<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.wrap</span> <span class="token punctuation">&#123;</span>        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>清除浮动（给父级元素加上overflow: auto）</li><li>阻止元素被浮动元素覆盖（给被覆盖的元素加上overflow: auto）</li></ul><hr><h3 id="4-三栏布局⭐⭐⭐⭐"><a href="#4-三栏布局⭐⭐⭐⭐" class="headerlink" title="4.三栏布局⭐⭐⭐⭐"></a>4.三栏布局⭐⭐⭐⭐</h3><p>圣杯布局和双飞翼布局<br><br>目的：</p><ul><li> 三栏布局，中间一栏最先加载和渲染(内容最重要)<br></li><li> 两侧内容固定，中间内容随着宽度自适应<br></li><li> 一般用于PC网页<br><br>技术总结：</li><li> 使用float布局<br></li><li> 两侧使用margin负值，以便和中间内容横向重叠<br></li><li> 防止中间内容被两侧覆盖，一个用padding一个用margin<br>区别：<br></li><li> 双飞翼布局采用margin留出空位，而圣杯布局采用padding</li><li> 双飞翼布局采用margin-left负值后不用再根据自身定位，而圣杯布局需要<br>双飞翼布局代码：<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">body</span> <span class="token punctuation">&#123;</span>        <span class="token property">min-width</span><span class="token punctuation">:</span> 550px    <span class="token punctuation">&#125;</span>    <span class="token selector">.column</span> <span class="token punctuation">&#123;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#center</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #cccccc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#main</span> <span class="token punctuation">&#123;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0 190px 0 190px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#left</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #ffff00<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 190px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#right</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 190px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> -190px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        this is center    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this is left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this is right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>圣杯布局代码：<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">body</span> <span class="token punctuation">&#123;</span>        <span class="token property">min-width</span><span class="token punctuation">:</span> 550px    <span class="token punctuation">&#125;</span>    <span class="token selector">#header</span> <span class="token punctuation">&#123;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#container</span> <span class="token punctuation">&#123;</span>        <span class="token property">padding-left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">padding-right</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#container .column</span> <span class="token punctuation">&#123;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left    <span class="token punctuation">&#125;</span>    <span class="token selector">#center</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%    <span class="token punctuation">&#125;</span>    <span class="token selector">#left</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> 200px    <span class="token punctuation">&#125;</span>    <span class="token selector">#right</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> -150px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#footer</span> <span class="token punctuation">&#123;</span>        <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #f1f1f1    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this is center<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this is left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this is right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h3 id="5-两栏布局⭐⭐⭐⭐"><a href="#5-两栏布局⭐⭐⭐⭐" class="headerlink" title="5. 两栏布局⭐⭐⭐⭐"></a>5. 两栏布局⭐⭐⭐⭐</h3><p>知道了三栏布局，想来两栏布局对你一定不在话下，下面介绍三种两栏布局的方式，一定要掌握。</p><ul><li>绝对定位方式<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.wrap</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box1</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #d43131<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box2</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #07d268<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>浮动方式<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.box1</span> <span class="token punctuation">&#123;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #d43131<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box2</span> <span class="token punctuation">&#123;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #07d268<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>flex方式<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.wrap</span> <span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box1</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #d43131<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box2</span> <span class="token punctuation">&#123;</span>        <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #07d268<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ded5c26c05f40a9b2043f454fa73b67~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li></ul><hr><h3 id="5-关于浮动⭐⭐⭐⭐⭐"><a href="#5-关于浮动⭐⭐⭐⭐⭐" class="headerlink" title="5.关于浮动⭐⭐⭐⭐⭐"></a>5.关于浮动⭐⭐⭐⭐⭐</h3><p>浮动的特点：<br><br>　　浮动会使元素脱离标准流，不占据页面空间，会覆盖标准流的元素，但不会覆盖标准流元素的文字<br><br>　　元素会排列在父层元素的左边或左边，或排列在已经浮动的元素的左边或者右边<br>清除浮动的方法：<br></p><ul><li>触发BFC<br><br>给父级元素加上overflow: auto<br></li><li>利用伪元素（clearfix）<br><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix::after</span> <span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>多设置一个兄弟元素，加上clear:both，其他方法都大同小异。</li></ul><hr><h3 id="6-定位⭐⭐⭐⭐⭐"><a href="#6-定位⭐⭐⭐⭐⭐" class="headerlink" title="6.定位⭐⭐⭐⭐⭐"></a>6.定位⭐⭐⭐⭐⭐</h3><ul><li>static:默认定位</li><li>relative:依据自身定位</li><li>absolute:依据最近一层的定位元素定位</li><li>fixed:固定定位，元素的位置相对于浏览器窗口是固定位置</li><li>inherit:继承父元素的定位</li><li>sticky：粘性定位<br><br>依赖于用户的滚动，在 position:relative 与 position:fixed 定位之间切换。<br><br>它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。 </li></ul><hr><h3 id="7-水平垂直居中⭐⭐⭐⭐⭐"><a href="#7-水平垂直居中⭐⭐⭐⭐⭐" class="headerlink" title="7.水平垂直居中⭐⭐⭐⭐⭐"></a>7.水平垂直居中⭐⭐⭐⭐⭐</h3><p>重点，建议尝试多种方法</p><ul><li>利用absolute绝对定位，top和left: margin-left和margin-top都取负值，为元素自身宽高的一半</li><li>利用absolute绝对定位，top和left: 50%，transform: translate(-50%, -50%)</li><li>利用absolute绝对定位：top, left, bottom, right都设置为0 ，margin: auto</li><li>利用flex<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.father</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>利用grid，网格布局</li></ul><p>PS：行内元素还可以：<br><br>　水平居中：text-align: center<br><br>　垂直居中：line-height的值等于height</p><hr><h3 id="8-line-height的继承⭐⭐⭐"><a href="#8-line-height的继承⭐⭐⭐" class="headerlink" title="8.line-height的继承⭐⭐⭐"></a>8.line-height的继承⭐⭐⭐</h3><ul><li>父亲的line-height为具体的值，如30px，子孙则继承该值,</li><li>如果为比例，如2/1.5，则继承该比例，计算还是根据自己的font-size计算</li><li>如果为百分比，如200%，则继承根据父亲的font-size乘以比例计算出来的值。(考点)</li></ul><hr><h3 id="9-长度单位⭐⭐⭐⭐"><a href="#9-长度单位⭐⭐⭐⭐" class="headerlink" title="9.长度单位⭐⭐⭐⭐"></a>9.长度单位⭐⭐⭐⭐</h3><ul><li>px：相对长度单位。像素px是相对于显示器屏幕分辨率而言的</li><li>em：相对长度单位，相对于父元素，不常用</li><li>rem：相对长度单位，相对于根元素，常用于响应式布局</li></ul><hr><h3 id="10-响应式布局⭐⭐⭐⭐"><a href="#10-响应式布局⭐⭐⭐⭐" class="headerlink" title="10.响应式布局⭐⭐⭐⭐"></a>10.响应式布局⭐⭐⭐⭐</h3><p>含义：响应式布局指的是同一页面在不同屏幕尺寸下有不同的布局</p><p>实现方式：</p><p>1.媒体查询<br><br>2.百分比布局<br><br>　　通过百分比单位，可以使得浏览器中组件的宽和高随着浏览器的高度的变化而变化，从而实现响应式的效果<br><br>3.rem布局<br><br>　　REM是CSS3新增的单位，移动端的支持度很高，rem单位都是相对于根元素html的font-size来决定大小的<br><br>4.视口单位<br><br>　css3中新的单位vw/vh<br><br>　vw 相对于视窗的宽度，1vw 等于视口宽度的1%，即视窗宽度是100vw<br><br>　vh相对于视窗的高度，1vh 等于视口高度的1%，即视窗高度是100vh<br><br>　vmin vw和vh中的较小值<br><br>　vmax vw和vh中的较大值<br><br>　可以搭配rem使用<br></p><p>响应式设计与自适应设计的区别：</p><ul><li>响应式开发<code>一套</code>界面，通过检测视口分辨率，针对不同客户端在客户端做代码处理，来展现不同的布局和内容；</li><li>自适应需要开发<code>多套</code>界面，通过检测视口分辨率，来判断当前访问的设备是pc端、平板、手机，从而请求服务层，返回不同的页面。</li></ul><hr><h3 id="11-CSS选择器：⭐⭐⭐⭐"><a href="#11-CSS选择器：⭐⭐⭐⭐" class="headerlink" title="11. CSS选择器：⭐⭐⭐⭐"></a>11. CSS选择器：⭐⭐⭐⭐</h3><ul><li>类选择器：.X</li><li>id选择器：#X</li><li>标签选择器：div</li><li>通用选择器：*</li><li>后代选择器：X Y</li><li>子元素选择器：X&gt;Y</li><li>属性选择器：[attr]，选择所有包含attr属性的</li><li>相邻兄弟选择器：A+B，B是A的下一个兄弟节点，B紧跟A，匹配B</li><li>通用兄弟选择器    A~B    B是A之后的兄弟节点，匹配B，B可以使很多个</li><li>伪类选择器：例子：<br>　　:link 未访问的链接<br><br>　　:visited 已访问的链接<br><br>　　:hover 鼠标移动到链接上<br><br>　　:active 选定的链接<br><br>　　:first-child等等<br></li><li>伪元素选择器<br>　　::before<br><br>　　::after<br></li></ul><p>伪类和伪元素的区别：<br></p><ul><li>伪类：<br>　　为了能够表达无法通过简单的选择器表达的信息，或者说用来添加一些选择器的特殊效果，一般为单个冒号加一个伪类名称<br></li><li>伪元素：<br>　　伪元素用于创建一些不在文档树中的元素，并为其添加样式，虽然用户可以看到这些文本，但是这些文本实际上不再文档树中</li></ul><p>选择器权重：</p><ul><li>内联样式，如: style=”…”，权值为1000。</li><li>ID选择器，如：#content，权值为100。</li><li>类，伪类、属性选择器，如.content，权值为10。</li><li>类型选择器、伪元素选择器，如div p，权值为1。</li><li>通配符、子选择器、相邻选择器等。如* &gt; +，权值为0000。</li><li>如果有!important优先级将会被提升到最高</li></ul><hr><h3 id="12-import和link的区别-⭐⭐⭐"><a href="#12-import和link的区别-⭐⭐⭐" class="headerlink" title="12.@import和link的区别 ⭐⭐⭐"></a>12.@import和link的区别 ⭐⭐⭐</h3><ul><li>  link是html提供的标签，@import是css的语法规则，只能加载在style标签内和css文件中</li><li>  link不存在兼容问题，@import对低版本可能存在兼容问题</li><li>  加载页面时，link标签引入的 CSS 被同时加载；@import引入的 CSS 将在页面加载完毕后被加载</li></ul><hr><h3 id="13-display-none和visibility-hidden和opacity-0的区别⭐⭐⭐⭐"><a href="#13-display-none和visibility-hidden和opacity-0的区别⭐⭐⭐⭐" class="headerlink" title="13.display: none和visibility: hidden和opacity: 0的区别⭐⭐⭐⭐"></a>13.display: none和visibility: hidden和opacity: 0的区别⭐⭐⭐⭐</h3><ul><li>空间占据问题<br>display: none 隐藏后的元素不占据任何空间<br><br>visibility: hidden 和opacity: 0隐藏的元素空间依旧存在。</li><li>回流重绘问题<br>display: none 隐藏产生回流和重绘（reflow 和 repaint）<br><br>visibility: hidden和opacity: 0只产生重绘</li><li>继承性<br>display:none一旦设置自己和后代将会消失<br><br>visibility具有继承性，如果将子元素的visibility设置回visible，name子元素将会显示出来<br><br>opacity: 0 也会被子元素继承，但是不能通过设置子元素opacity: 0使其重新显示</li><li>事件绑定<br>display: none和visibility: hidden时绑定的事件不能触发<br><br>opacity: 0时绑定的事件能够触发。</li><li>过渡动画<br>transition对于display和visibility是无效的<br><br>transition对于opacity是有效的</li></ul><hr><h3 id="14-flex-⭐⭐⭐⭐⭐"><a href="#14-flex-⭐⭐⭐⭐⭐" class="headerlink" title="14.flex ⭐⭐⭐⭐⭐"></a>14.flex ⭐⭐⭐⭐⭐</h3><p>作为平时最常用的布局方式，这是必须详细掌握的，推荐<a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">阮一峰–flex</a><br>，以下是上面文章的部分总结：</p><p>flex是弹性盒子，任何一个容器都可以指定为 Flex 布局。<br><br>给容器设置display: flex后，它的所有子元素自动成为容器成员<br><br>容器默认存在两根轴：水平的主轴和垂直的交叉轴<br><br>容器有6个属性: <br></p><ul><li>flex-direction<br><br>  决定主轴的方向<br><br>  flex-direction: row | row-reverse | column | column-reverse</li><li>flex-wrap<br><br>  如果一条轴线排不下，如何换行。<br><br>  flex-wrap: nowrap | wrap | wrap-reverse</li><li>flex-flow<br><br>  是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap<br></li><li>justify-content<br><br>  定义了项目在主轴上的对齐方式。<br><br>  justify-content: flex-start | flex-end | center | space-between | space-around</li><li>align-items<br><br>  定义项目在交叉轴上如何对齐<br><br>  align-items: flex-start | flex-end | center | baseline | stretch（默认值）</li><li>align-content<br><br>  定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。<br><br>   align-content: flex-start | flex-end | center | space-between | space-around | stretch;</li></ul><hr><h3 id="15-画三角形或梯形⭐⭐⭐⭐"><a href="#15-画三角形或梯形⭐⭐⭐⭐" class="headerlink" title="15.画三角形或梯形⭐⭐⭐⭐"></a>15.画三角形或梯形⭐⭐⭐⭐</h3><ul><li>CSS方法：<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.box</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">border-right</span><span class="token punctuation">:</span> 100px solid transparent<span class="token punctuation">;</span>        <span class="token property">border-left</span><span class="token punctuation">:</span> 100px solid transparent<span class="token punctuation">;</span>        <span class="token property">border-top</span><span class="token punctuation">:</span> 100px solid #d43131<span class="token punctuation">;</span>        <span class="token property">border-bottom</span><span class="token punctuation">:</span> 100px solid transparent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38b2f1f2a3b842fab57fbd3f13357393~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br><br>如果需要画梯形就改变width的值即可</p><ul><li>Canvas方法：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>style<span class="token operator">></span>    #box2 <span class="token punctuation">&#123;</span>        width<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        height<span class="token operator">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>    <span class="token operator">&lt;</span>canvas id<span class="token operator">=</span><span class="token string">"box2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>canvas<span class="token operator">></span>    <span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#box2'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     ctx<span class="token punctuation">.</span>fillStyle<span class="token operator">=</span><span class="token string">"#8989e7"</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23a95003816d4e138896e8cb2bce396c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><hr><h3 id="16-z-index⭐⭐⭐"><a href="#16-z-index⭐⭐⭐" class="headerlink" title="16. z-index⭐⭐⭐"></a>16. z-index⭐⭐⭐</h3><p>　　关于z-index，起初我只知道设置position后z-index大的就会在上面，但是实际做项目却出现了许许多多的问题<br><br>　　推荐一篇讲z-index很全面的文章<a href="https://juejin.cn/post/6844903667175260174">彻底搞懂CSS层叠上下文、层叠等级、层叠顺序、z-index</a></p><ul><li>  首先需要比较两个元素是否在同一个层叠上下文里，如果是再根据以下层叠顺序图比较，如果不是，就需要比较他们层叠上下文的层叠顺序<br>　PS：层叠顺序表<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28382b519692434cbbe9482cb6c31f67~tplv-k3u1fbpfcp-zoom-1.image" title="层叠顺序表"></li></ul><hr><h3 id="17-CSS3新特性⭐⭐⭐⭐"><a href="#17-CSS3新特性⭐⭐⭐⭐" class="headerlink" title="17. CSS3新特性⭐⭐⭐⭐"></a>17. CSS3新特性⭐⭐⭐⭐</h3><ul><li>  边框圆角 border-radius</li><li>  阴影box-shadow</li><li>选择器：<br><br>  属性选择器  [attr]：选择包含attr属性的标签  [attr^=value]：选择attr属性值以value开头的标签<br><br>  伪类选择器  first-child, nth-child(n)</li><li>  颜色渐变  linear-gradient</li><li>  2D变换<br><br>　　translate()：对元素进行进行移动<br><br>　　scale()：对元素进行缩放<br><br>　　rotate()：围绕中心旋转，正值顺时针，负值逆时针</li><li>  动画  transition  animation</li><li>  flex布局</li></ul><hr><h3 id="18-DOM树和CSSOM的构建过程⭐⭐"><a href="#18-DOM树和CSSOM的构建过程⭐⭐" class="headerlink" title="18. DOM树和CSSOM的构建过程⭐⭐"></a>18. DOM树和CSSOM的构建过程⭐⭐</h3><p>DOM树和CSSOM的构建过程其实差不多</p><ol><li>首先解析文件（HTML文件，CSS文件）</li><li>将字节转换成字符</li><li>确定tokens（标签）</li><li>将tokens转换成节点</li><li>最后根据节点构建DOM树 || CSSOM<br>PS：构建DOM树的图和CSSOM的图，一看就明白</li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b0df487195d4977bec98166c5f165bb~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8790ad83f4c045a7b1a58142d2ca0de7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><hr><h3 id="19-回流和重绘⭐⭐⭐⭐⭐"><a href="#19-回流和重绘⭐⭐⭐⭐⭐" class="headerlink" title="19. 回流和重绘⭐⭐⭐⭐⭐"></a>19. 回流和重绘⭐⭐⭐⭐⭐</h3><ul><li>回流（重排或布局）<br></li></ul><p>当渲染树中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建，这就称为回流<br></p><ul><li><p>重绘<br>当渲染树中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如background-color。则就叫称为重绘</p></li><li><p>回流和重绘发生的时机：<br>首先，回流一定会发生重绘，重绘不一定会回流，在页面第一次加载时一定会回流和重绘</p></li><li><p>会发生回流的例子：<br>页面首次渲染的时候<br><br>添加或删除可见的DOM元素<br><br>元素的位置发生变化<br><br>元素的尺寸发生变化<br><br>内容发生变化，比如文本变化（文字大小、行高发生变化）<br><br>浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）</p></li><li><p>列举几个会发生重绘的元素属性：<br>color<br><br>background-color<br><br>box-shadow<br><br>border-radius<br><br>visibility<br></p></li><li><p>如何减少回流和重绘</p></li></ul><ol><li>DOM操作时很贵的，要尽可能少得操作DOM，通过合并多次DOM样式的修改，来减少回流和重绘的发生次数</li><li>如果需要对一个DOM进行大量操作，可以先用display：none进行隐藏，操作后再显示，这样就只引发两次回流和重绘</li><li>对于复杂动画效果,使用绝对定位让其脱离文档流</li><li> 使用css3硬件加速，可以让transform、opacity、filters这些动画不会引起回流重绘</li><li>浏览器队列机制：回流和重绘的开销很多，所以浏览器维护一个队列，当有回流和重绘时会放入这个队列，当达到了一定数量或者达到了一定的时间间隔才会触发，这样就会让多次变成一次，但是有一些元素会强制触发队列，需要注意<br>　　offsetTop、offsetLeft、offsetWidth、offsetHeight<br><br>　　scrollTop、scrollLeft、scrollWidth、scrollHeight<br><br>　　clientTop、clientLeft、clientWidth、clientHeight<br><br>　　getComputedStyle()<br><br>　　getBoundingClientRect<br></li></ol><hr><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>　　非常感谢您到阅读到最后，有任何问题都可以联系我，希望能够一起进步。<br><br>　　最后祝您前程似锦，我们各自攀登，高处相见🌈！</p><hr><p>参考文章：<br><br><a href="https://juejin.cn/post/6844903779700047885">你真的了解回流和重绘吗</a><br><br><a href="https://juejin.cn/post/6844903667175260174">彻底搞懂CSS层叠上下文、层叠等级、层叠顺序、z-index</a><br><br><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">阮一峰–flex</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
